<?xml version="1.0" encoding="UTF-8"?>
<?oxygen SCHSchema="../schematrons/profils/IHE.sch"?>
<?oxygen SCHSchema="../schematrons/profils/structurationMinimale/ASIP-STRUCT-MIN-StrucMin.sch"?>
<?oxygen SCHSchema="../schematrons/profils/CI-SIS_ModelesDeContenusCDA.sch"?>
<?oxygen SCHSchema="../schematrons/profils/CI-SIS_Modeles_ANS.sch"?>
<?oxygen SCHSchema="../schematrons/profils/terminologies/schematron/terminologie.sch"?>
<?oxygen SCHSchema="../schematrons/CI-SIS_BIO-CR-BIO_2021.01.sch"?>
<!-- 
	**********************************************************************************************************
    Document : Compte-rendu d’examens de biologie médicale autoprésentable (BIO-CR-BIO_2022.01)      
    Auteur : ANS
    **********************************************************************************************************
    format HL7 - CDA Release 2 niveau 3
    **********************************************************************************************************
    Historique :
    13/10/2022 : version 2022.01
    **********************************************************************************************************
-->
<!-- Un document autoprésentable utilise la feuille de style fournie dans le document -->
<?xml-stylesheet type="text/xsl"  href="#"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:exsl="http://exslt.org/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:data="urn:asip-sante:ci-sis" xmlns:c="urn:hl7-org:v3"
	xmlns:lab="urn:oid:1.3.6.1.4.1.19376.1.3.2" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
	xmlns:xad="http://uri.etsi.org/01903/v1.2.2#" xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
	xmlns:fo="http://www.w3.org/1999/XSL/Format"
	xmlns:fox="http://xmlgraphics.apache.org/fop/extensions"
	xsi:schemaLocation="urn:hl7-org:v3 ../infrastructure/cda/CDA_extended.xsd">

	<data:Contenu>
		<c:ClinicalDocument>
			<!--
    		********************************************************
    		En-tête du document
    		********************************************************
			-->
			<c:realmCode code="FR"/>
			<c:typeId root="2.16.840.1.113883.1.3" extension="POCD_HD000040"/>
			<!-- Déclarations de conformité HL7 France -->
			<c:templateId root="2.16.840.1.113883.2.8.2.1"/>
			<!-- Déclarations de conformité CI-SIS -->
			<c:templateId root="1.2.250.1.213.1.1.1.1"/>
			<!-- Déclarations de conformité IHE PALM -->
			<c:templateId root="1.3.6.1.4.1.19376.1.3.3"/>
			<!-- Déclarations de conformité au modèle CR-BIO du CI-SIS -->
			<c:templateId root="1.2.250.1.213.1.1.1.55"/>
			<!-- Unique ID obligatoire -->
			<c:id root="1.2.250.1.213.1.1.1.55.2021.1.1"/>
			<!-- Type de document -->
			<c:code code="11502-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"
				displayName="CR d'examens biologiques"/>
			<!-- Titre du document -->
			<c:title>Compte rendu d'examens biologiques</c:title>
			<!-- Date et heure de création du document -->
			<c:effectiveTime value="20210401171000+0100"/>
			<!-- Niveau de confidentialité du document -->
			<c:confidentialityCode code="N" displayName="Normal" codeSystem="2.16.840.1.113883.5.25"/>
			<!-- Langue du document -->
			<c:languageCode code="fr-FR"/>
			<!-- identifiant commun à toutes les versions successives du comtpe rendu -->
			<c:setId root="1.2.250.1.213.1.1.1.55.2021.1"/>
			<!-- numéro de la version courante (entier positif): la première version -->
			<c:versionNumber value="1"/>
			<!-- Patient -->
			<c:recordTarget>
				<c:patientRole>
					<!-- INS-NIR de test : 1.2.250.1.213.1.4.10 -->
					<c:id extension="279035121518989" root="1.2.250.1.213.1.4.10"/>
					<!-- IPP du patient dans l'établissement avec root = l'OID de l'ES -->
					<c:id extension="1234567890121" root="1.2.3.4.567.8.9.10"/>
					<!-- Adresse -->
					<c:addr use="H">
						<c:houseNumber>28</c:houseNumber>
						<c:streetName>Avenue de Breteuil</c:streetName>
						<c:unitID>Escalier A</c:unitID>
						<c:postalCode>75007</c:postalCode>
						<c:city>Paris</c:city>
						<c:country>FRANCE</c:country>
					</c:addr>
					<!-- Télécom -->
					<c:telecom value="tel:0144534551" use="H"/>
					<c:telecom value="tel:0647151010" use="MC"/>
					<c:telecom value="mailto:279035121518989@patient.mssante.fr"/>
					<!-- Identité du patient -->
					<c:patient classCode="PSN">
						<c:name>
							<!-- Nom et prénom(s) de naissance -->
							<!-- Nom de l’acte de naissance -->
							<c:family qualifier="BR">PAT-TROIS</c:family> 
							<!-- Prénoms de l’acte de naissance -->
							<c:given>DOMINIQUE MARIE-LOUISE</c:given>
							<!-- Premier prénom de l’acte de naissance -->
							<c:given qualifier="BR">DOMINIQUE</c:given>
							<!-- Nom et prénom utilisés -->
							<c:family qualifier="CL">PAT-TROIS</c:family>
							<c:given qualifier="CL">DOMINIQUE</c:given>        
						</c:name>
						<c:administrativeGenderCode code="F" displayName="Féminin"
							codeSystem="2.16.840.1.113883.5.1"/>
						<!-- date du décès (obligatoire si le patient est décédé) -->
						<c:birthTime value="19790328"/>
						<!-- Représentant du patient -->
						<c:guardian>
							<c:addr use="H">
								<c:houseNumber>28</c:houseNumber>
								<c:streetName>Avenue de Breteuil</c:streetName>
								<c:postalCode>75007</c:postalCode>
								<c:city>PARIS</c:city>
								<c:country>FRANCE</c:country>
							</c:addr>
							<c:telecom value="tel:0147150000" use="H"/>
							<c:guardianPerson>
								<c:name>
									<c:prefix>MME</c:prefix>
									<c:family>NESSI</c:family>
									<c:given>Jeanne</c:given>
								</c:name>
							</c:guardianPerson>
						</c:guardian>
						<!-- Lieu de naissance du patient -->
						<c:birthplace>
							<c:place>
								<c:addr>
									<c:county>51215</c:county>
									<c:city>DOMPREMY</c:city>
								</c:addr>
							</c:place>
						</c:birthplace>
					</c:patient>
				</c:patientRole>
			</c:recordTarget>

			<!-- Auteur -->
			<c:author>
				<c:time value="20210104160527+0100"/>
				<c:assignedAuthor>
					<c:id root="1.2.250.1.71.4.2.1" extension="801234534765"/>
					<c:code code="G15_10/SM03" displayName="Médecin - Biologie médicale (SM)"
						codeSystem="1.2.250.1.213.1.1.4.5"/>
					<c:addr>
						<c:houseNumber>8</c:houseNumber>
						<c:streetName>Rue Frédéric Bastia</c:streetName>
						<c:postalCode>92100</c:postalCode>
						<c:city>BOULOGNE-BILLANCOURT</c:city>
					</c:addr>
					<c:telecom value="tel:0174589607" use="WP"/>
					<c:assignedPerson>
						<c:name>
							<c:prefix>M</c:prefix>
							<c:given>Marcel</c:given>
							<c:family>CAMPARINI</c:family>
							<c:suffix>DR</c:suffix>
						</c:name>
					</c:assignedPerson>
					<c:representedOrganization>
						<!-- Identifiant de l'organisation -->
						<c:id root="1.2.250.1.71.4.2.2" extension="1120459876"/>
						<!-- Nom de l'organisation -->
						<c:name>Laboratoire des charmes</c:name>
						<!-- Coordonnées télécom de l'organisation -->
						<c:telecom value="tel:0174589607" use="WP"/>
						<!-- Adresse de l'organisation -->
						<c:addr>
							<c:houseNumber>8</c:houseNumber>
							<c:streetName>Rue Frédéric Bastia</c:streetName>
							<c:postalCode>92100</c:postalCode>
							<c:city>BOULOGNE-BILLANCOURT</c:city>
						</c:addr>
					</c:representedOrganization>
				</c:assignedAuthor>
			</c:author>

			<!-- Organisation chargée de la conservation du document -->
			<c:custodian>
				<c:assignedCustodian>
					<c:representedCustodianOrganization>
						<!-- Identifiant de l'organisation -->
						<c:id root="1.2.250.1.71.4.2.2" extension="1120459876"/>
						<!-- Nom de l'organisation -->
						<c:name>Laboratoire des charmes</c:name>
						<!-- Coordonnées télécom de l'organisation -->
						<c:telecom value="tel:0174589607" use="WP"/>
						<!-- Adresse de l'organisation -->
						<c:addr>
							<c:houseNumber>8</c:houseNumber>
							<c:streetName>Rue Frédéric Bastia</c:streetName>
							<c:postalCode>92100</c:postalCode>
							<c:city>BOULOGNE-BILLANCOURT</c:city>
						</c:addr>
					</c:representedCustodianOrganization>
				</c:assignedCustodian>
			</c:custodian>

			<!-- Responsable du document -->
			<c:legalAuthenticator>
				<!-- Date et heure de la prise de responsabilité -->
				<c:time value="20210104160527+0100"/>
				<c:signatureCode code="S"/>
				<c:assignedEntity>
					<!-- PS identifié par son N°RPPS -->
					<c:id root="1.2.250.1.71.4.2.1" extension="801234534765"/>
					<!-- Profession / spécialité du PS -->
					<c:code code="G15_10/SM03" displayName="Médecin - Biologie médicale (SM)"
						codeSystem="1.2.250.1.213.1.1.4.5"/>
					<!-- Adresse du PS-->
					<c:addr>
						<c:houseNumber>8</c:houseNumber>
						<c:streetName>Rue Frédéric Bastia</c:streetName>
						<c:postalCode>92100</c:postalCode>
						<c:city>BOULOGNE-BILLANCOURT</c:city>
					</c:addr>
					<!-- Coordonnées télécom du PS-->
					<c:telecom value="tel:0174589607" use="WP"/>
					<!-- Identité du PS -->
					<c:assignedPerson>
						<c:name>
							<c:prefix>M</c:prefix>
							<c:given>Marcel</c:given>
							<c:family>CAMPARINI</c:family>
							<c:suffix>DR</c:suffix>
						</c:name>
					</c:assignedPerson>
					<!-- Etablissement de rattachement du PS -->
					<c:representedOrganization>
						<!-- Identifiant de l'organisation -->
						<c:id root="1.2.250.1.71.4.2.2" extension="1120459876"/>
						<!-- Nom de l'organisation -->
						<c:name>Laboratoire des charmes</c:name>
						<!-- Coordonnées télécom de l'organisation -->
						<c:telecom value="tel:0174589607" use="WP"/>
						<!-- Adresse de l'organisation -->
						<c:addr>
							<c:houseNumber>8</c:houseNumber>
							<c:streetName>Rue Frédéric Bastia</c:streetName>
							<c:postalCode>92100</c:postalCode>
							<c:city>BOULOGNE-BILLANCOURT</c:city>
						</c:addr>
						<c:standardIndustryClassCode code="ETABLISSEMENT"
							displayName="Etablissement de santé" codeSystem="1.2.250.1.213.1.1.4.9"
							codeSystemName="practiceSettingCode"/>
					</c:representedOrganization>
				</c:assignedEntity>
			</c:legalAuthenticator>

			<!-- Médecin prescripteur des examens de biologie -->
			<c:participant typeCode="REF">
				<c:templateId root="1.3.6.1.4.1.19376.1.3.3.1.6"/>
				<!-- Date de la prescription -->
				<c:time xsi:type="c:IVL_TS">
					<c:high value="202101010735+0100"/>
				</c:time>
				<c:associatedEntity classCode="PROV">
					<c:id root="1.2.250.1.71.4.2.1" extension="810002422979"/>
					<c:code code="G15_10/SM41" displayName="Médecin - Pneumologie (SM)"
						codeSystem="1.2.250.1.213.1.1.4.5"/>
					<c:addr>
						<c:streetAddressLine>5 rue du chêne</c:streetAddressLine>
						<c:streetAddressLine>92100 BOULOGNE-BILLANCOURT</c:streetAddressLine>
					</c:addr>
					<c:telecom nullFlavor="NASK"/>
					<c:associatedPerson>
						<c:name>
							<c:suffix>DR</c:suffix>
							<c:given>Pascal</c:given>
							<c:family>CHARLES</c:family>
						</c:name>
					</c:associatedPerson>
				</c:associatedEntity>
			</c:participant>

			<!-- Préleveur : une infirmière libérale -->
			<c:participant typeCode="PRF">
				<c:functionCode code="PRELV" displayName="Préleveur"
					codeSystem="1.2.250.1.213.1.1.4.2.280"/>
				<!-- Date et heure de prélèvement -->
				<c:time xsi:type="c:IVL_TS">
					<c:high value="202101040735+0100"/>
				</c:time>
				<c:associatedEntity classCode="PROV">
					<c:id root="1.2.250.1.71.4.2.1" extension="801234567893"/>
					<c:code code="G15_60" displayName="Infirmier" codeSystem="1.2.250.1.213.1.1.4.5"/>
					<c:addr>
						<c:houseNumber>12</c:houseNumber>
						<c:streetName>Rue du renard</c:streetName>
						<c:postalCode>92100</c:postalCode>
						<c:city>BOULOGNE-BILLANCOURT</c:city>
					</c:addr>
					<c:telecom value="tel:0149154578" use="EC"/>
					<c:associatedPerson>
						<c:name>
							<c:prefix>MME</c:prefix>
							<c:given>Roberta</c:given>
							<c:family>BLEEDER</c:family>
						</c:name>
					</c:associatedPerson>
					<c:scopingOrganization>
						<!-- Identifiant de l'organisation -->
						<c:id root="1.2.250.1.71.4.2.2" extension="1120452948"/>
						<!-- Nom de l'organisation -->
						<c:name>Cabinet d'infirmières de BB</c:name>
						<!-- Coordonnées télécom de l'organisation -->
						<c:telecom value="tel:0138475439" use="WP"/>
						<!-- Adresse de l'organisation -->
						<c:addr>
							<c:houseNumber>12</c:houseNumber>
							<c:streetName>Rue du renard</c:streetName>
							<c:postalCode>92100</c:postalCode>
							<c:city>BOULOGNE-BILLANCOURT</c:city>
						</c:addr>
					</c:scopingOrganization>
				</c:associatedEntity>
			</c:participant>

			<!-- Médecin traitant -->
			<c:participant typeCode="INF">
				<c:functionCode code="PCP" displayName="Médecin traitant"
					codeSystem="2.16.840.1.113883.5.88"/>
				<c:time nullFlavor="NA"/>
				<c:associatedEntity classCode="PROV">
					<c:id root="1.2.250.1.71.4.2.1" extension="00B1057294"/>
					<c:code code="G15_10/SM26" codeSystem="1.2.250.1.213.1.1.4.5"
						displayName="Médecin - Qualifié en Médecine Générale (SM)"/>
					<c:addr>
						<c:streetAddressLine>8 rue de Lyon</c:streetAddressLine>
						<c:streetAddressLine>92100 Boulogne</c:streetAddressLine>
					</c:addr>
					<c:telecom value="tel:+33-1-42-00-00-01" use="WP"/>
					<c:telecom value="mailto:paul.medecin5729@medecin.formation.mssante.fr" use="WP"/>
					<c:associatedPerson>
						<c:name>
							<c:given>Paul</c:given>
							<c:family>MEDECIN5729</c:family>
							<c:suffix>DR</c:suffix>
						</c:name>
					</c:associatedPerson>
					<c:scopingOrganization>
						<c:id root="1.2.250.1.71.4.2.2" extension="00B105729400"/>
						<c:name>CABINET M. MEDECIN5729</c:name>
						<c:telecom value="tel:+33-1-42-00-00-00" use="WP"/>
						<c:telecom value="mailto:cabinet.medecin5729@medecin.formation.mssante.fr"
							use="WP"/>
						<c:addr>
							<c:streetAddressLine>8 rue de Lyon</c:streetAddressLine>
							<c:streetAddressLine>92100 Boulogne</c:streetAddressLine>
						</c:addr>
						<c:standardIndustryClassCode code="AMBULATOIRE" displayName="Ambulatoire"
							codeSystem="1.2.250.1.213.1.1.4.9"/>
					</c:scopingOrganization>
				</c:associatedEntity>
			</c:participant>

			<!-- Identifiant de la prescription d'examens de biologie reçue par le SIL  -->
			<c:inFulfillmentOf>
				<c:order>
					<c:id root="1.2.250.1.213.1.1.9" extension="2014123456789"/>
				</c:order>
			</c:inFulfillmentOf>

			<!--  Acte principal : La demande d'examens enregistrée dans le SI du laboratoire (SGL) et le 1er chapitre du compte rendu -->
			<c:documentationOf>
				<c:serviceEvent>
					<c:id root="1.2.250.1.213.1.1.9" extension="202111111123"/>
					<c:code code="18719-5" displayName="Biochimie"
						codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
					<lab:statusCode code="completed"/>
					<c:effectiveTime>
						<!-- Date de réception de la demande et des échantillons -->
						<c:low value="20210104092200+0100"/>
						<!-- Date de fin de traitement = date et heure de libération du compte rendu final -->
						<c:high value="20210104160500+0100"/>
					</c:effectiveTime>
					<!-- Laboratoire exécutant -->
					<c:performer typeCode="PRF">
						<c:templateId root="1.3.6.1.4.1.19376.1.3.3.1.7"/>
						<c:time>
							<c:high value="20210104152530+0100"/>
						</c:time>
						<c:assignedEntity>
							<!-- Identifiant du directeur du laboratoire -->
							<c:id root="1.2.250.1.71.4.2.1" extension="801234534765"/>
							<c:code code="G15_10/SM03"
								displayName="Médecin - Biologie médicale (SM)"
								codeSystem="1.2.250.1.213.1.1.4.5"/>
							<c:addr>
								<c:houseNumber>8</c:houseNumber>
								<c:streetName>Rue Frédéric Bastia</c:streetName>
								<c:postalCode>92100</c:postalCode>
								<c:city>BOULOGNE-BILLANCOURT</c:city>
							</c:addr>
							<c:telecom value="tel:0174589607" use="WP"/>
							<c:assignedPerson>
								<c:name>
									<c:prefix>M</c:prefix>
									<c:given>Marcel</c:given>
									<c:family>CAMPARINI</c:family>
									<c:suffix>DR</c:suffix>
								</c:name>
							</c:assignedPerson>
							<c:representedOrganization>
								<!-- Identifiant de l'organisation -->
								<c:id root="1.2.250.1.71.4.2.2" extension="1120459876"/>
								<!-- Nom de l'organisation -->
								<c:name>Laboratoire des charmes</c:name>
								<!-- Coordonnées télécom de l'organisation -->
								<c:telecom value="tel:0174589607" use="WP"/>
								<!-- Adresse de l'organisation -->
								<c:addr>
									<c:houseNumber>8</c:houseNumber>
									<c:streetName>Rue Frédéric Bastia</c:streetName>
									<c:postalCode>92100</c:postalCode>
									<c:city>BOULOGNE-BILLANCOURT</c:city>
								</c:addr>
								<!-- Cadre d'exercice : Laboratoire de ville -->
								<c:standardIndustryClassCode code="AMBULATOIRE"
									displayName="Ambulatoire" codeSystem="1.2.250.1.213.1.1.4.9"/>
							</c:representedOrganization>
						</c:assignedEntity>
					</c:performer>
				</c:serviceEvent>
			</c:documentationOf>

			<!--  Acte secondaire : Chapitres de biologie du compte rendu -->
			<c:documentationOf>
				<c:serviceEvent>
					<c:code code="18727-8" displayName="Sérologie"
						codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
				</c:serviceEvent>
			</c:documentationOf>

			<!--  Acte secondaire : Chapitres de biologie du compte rendu -->
			<c:documentationOf>
				<c:serviceEvent>
					<c:code code="18718-7" displayName="Protéines, marqueurs tumoraux, vitamines"
						codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
				</c:serviceEvent>
			</c:documentationOf>

			<!-- Contexte de la prise en charge -->
			<c:componentOf>
				<c:encompassingEncounter>
					<c:id root="1.2.250.1.71.4.2.1" extension="801234534765"/>
					<c:code code="AMB" displayName="Ambulatoire (hors établissement)" codeSystem="2.16.840.1.113883.5.4"/>
					<c:effectiveTime>
						<c:low value="202101040735+0100"/>
					</c:effectiveTime>
					<!-- Biologiste et laboratoire responsable -->
					<c:responsibleParty>
						<c:assignedEntity>
							<!-- Identifiant du biologiste responsable -->
							<c:id root="1.2.250.1.71.4.2.1" extension="801234534765"/>
							<!-- Profession / Spécialité du biologiste responsable -->
							<c:code code="G15_10/SM03"
								displayName="Médecin - Biologie médicale (SM)"
								codeSystem="1.2.250.1.213.1.1.4.5"/>
							<!-- Adresse du biologiste responsable -->
							<c:addr>
								<c:houseNumber>8</c:houseNumber>
								<c:streetName>Rue Frédéric Bastia</c:streetName>
								<c:postalCode>92100</c:postalCode>
								<c:city>BOULOGNE-BILLANCOURT</c:city>
							</c:addr>
							<!-- Coordonnées télécom du biologiste responsable -->
							<c:telecom value="tel:0174589607" use="WP"/>
							<!-- Identité du biologiste responsable -->
							<c:assignedPerson>
								<c:name>
									<c:prefix>M</c:prefix>
									<c:given>Marcel</c:given>
									<c:family>CAMPARINI</c:family>
									<c:suffix>DR</c:suffix>
								</c:name>
							</c:assignedPerson>
							<!-- Laboratoire du biologiste responsable -->
							<c:representedOrganization>
								<!-- Identifiant du laboratoire responsable -->
								<c:id root="1.2.250.1.71.4.2.2" extension="1120459876"/>
								<!-- Numéro d'accréditation du laboratoire responsable  -->
								<c:id root="1.2.250.1.213.6.3.1" extension="8-WXYZ"
									assigningAuthorityName="COFRAC"/>
								<!-- Nom du laboratoire responsable -->
								<c:name>Laboratoire des charmes</c:name>
								<!-- Coordonnées télécom du laboratoire responsable -->
								<c:telecom value="tel:0174589607" use="WP"/>
								<!-- Adresse du laboratoire responsable -->
								<c:addr>
									<c:houseNumber>8</c:houseNumber>
									<c:streetName>Rue Frédéric Bastia</c:streetName>
									<c:postalCode>92100</c:postalCode>
									<c:city>BOULOGNE-BILLANCOURT</c:city>
								</c:addr>
							</c:representedOrganization>
						</c:assignedEntity>
					</c:responsibleParty>
					<!-- Laboratoire où s’est déroulée la prise en charge -->
					<c:location>
						<c:healthCareFacility>
							<!-- Modalité d’exercice -->
							<c:code code="SA25" displayName="Laboratoire de biologie médicale"
								codeSystem="1.2.250.1.71.4.2.4"> </c:code>
							<!-- Localisation du laboratoire -->
							<c:location>
								<!-- Nom du laboratoire responsable -->
								<c:name>Laboratoire des charmes</c:name>
								<!-- Adresse du laboratoire responsable -->
								<c:addr>
									<c:houseNumber>8</c:houseNumber>
									<c:streetName>Rue Frédéric Bastia</c:streetName>
									<c:postalCode>92100</c:postalCode>
									<c:city>BOULOGNE-BILLANCOURT</c:city>
								</c:addr>
							</c:location>
						</c:healthCareFacility>
					</c:location>
				</c:encompassingEncounter>
			</c:componentOf>

			<!--
    		********************************************************
    		Corps du document
    		********************************************************
    		-->
			<c:component>
				<c:structuredBody>
					<!-- Section FR-CR-BIO-Chapitre : chapitre "Biochimie" -->
					<c:component>
						<c:section>
							<!-- Conformité Laboratory Specialty Section (IHE PALM) -->
							<c:templateId root="1.3.6.1.4.1.19376.1.3.3.2.1"/>
							<!-- Conformité FR-CR-BIO-Chapitre (CI-SIS) -->
							<c:templateId root="1.2.250.1.213.1.1.2.70"/>
							<c:code code="18719-5" displayName="Biochimie"
								codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
							<c:title>BIOCHIMIE</c:title>

							<!-- Section FR-CR-BIO-Sous-Chapitre : "Bilan lipidique" -->
							<c:component>
								<c:section>
									<!-- Conformité Laboratory Report Item Section (IHE PALM) -->
									<c:templateId root="1.3.6.1.4.1.19376.1.3.3.2.2"/>
									<!-- Conformité FR-CR-BIO-Sous-Chapitre (CI-SIS) -->
									<c:templateId root="1.2.250.1.213.1.1.2.71"/>
									<c:code code="57698-3" displayName="Bilan lipidique"
										codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
									<c:text>
										<c:table border="0">
											<c:thead align="center">
												<c:tr align="left">
												<c:th styleCode="Bold">BILAN LIPIDIQUE</c:th>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th>Valeurs de référence</c:th>
												</c:tr>
											</c:thead>
											<c:tbody align="center">
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">Triglycérides</c:td>
												<c:td/>
												<c:td align="right">0.62</c:td>
												<c:td align="left">g/l</c:td>
												<c:td/>
												<c:td align="left">(0.50 - 1.50)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">
												<c:content ID="BL0002">...(Colorimétrie
												enzymatique)</c:content>
												</c:td>
												<c:td/>
												<c:td align="right">0.71</c:td>
												<c:td align="left">mmol/l</c:td>
												<c:td/>
												<c:td align="left">(0.57 - 1.71)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">Cholestérol</c:td>
												<c:td/>
												<c:td align="right">1.90</c:td>
												<c:td align="left">g/l</c:td>
												<c:td/>
												<c:td align="left">(1.50 - 2.00)</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">
												<c:content ID="BL0003">...(Colorimétrie
												enzymatique)</c:content>
												</c:td>
												<c:td/>
												<c:td align="right">4.90</c:td>
												<c:td align="left">mmol/l</c:td>
												<c:td/>
												<c:td align="left">(3.87 - 5.16)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">H.D.L. Cholestérol</c:td>
												<c:td/>
												<c:td align="right">0.73</c:td>
												<c:td align="left">g/l</c:td>
												<c:td/>
												<c:td align="left">(0.40 - 1.00)</c:td>
												</c:tr>
												<c:tr align="left">
												<c:td align="left">
												<c:content ID="BL0004">...(Enzymatique
												HDL-direct)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">L.D.L. Cholestérol
												calculé</c:td>
												<c:td/>
												<c:td align="right">1.05</c:td>
												<c:td align="left">g/l</c:td>
												<c:td/>
												<c:td align="left">(&lt;1.60)</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">
												<c:content ID="BL0005">...(Calculé selon la
												formule de Friedewald)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
											</c:tbody>
										</c:table>
										<c:br/>
										<c:table border="1">
											<c:thead align="center">
												<c:tr>
												<c:th colspan="2">Objectifs thérapeutiques en
												fonction des facteurs de risque
												cardiovasculaires</c:th>
												</c:tr>
												<c:tr>
												<c:th colspan="2">(Recommandations ANSM
												2005)</c:th>
												</c:tr>
												<c:tr>
												<c:th>Facteur de risque</c:th>
												<c:th>Objectifs thérapeutiques LDL en g/l</c:th>
												</c:tr>
											</c:thead>
											<c:tbody align="center">
												<c:tr>
												<c:td>Absence</c:td>
												<c:td>&lt;2.20</c:td>
												</c:tr>
												<c:tr>
												<c:td>1</c:td>
												<c:td>&lt;1.90</c:td>
												</c:tr>
												<c:tr>
												<c:td>2</c:td>
												<c:td>&lt;1.60</c:td>
												</c:tr>
												<c:tr>
												<c:td>3 ou plus</c:td>
												<c:td>&lt;1.30</c:td>
												</c:tr>
												<c:tr>
												<c:td>Haut risque</c:td>
												<c:td>&lt;1.00</c:td>
												</c:tr>
												<c:tr>
												<c:td colspan="2">...</c:td>
												</c:tr>
												<c:tr>
												<c:td rowspan="6">Facteurs de risque</c:td>
												<c:td align="left">- Hommes de 50 ans ou plus ou
												femmes de 60 ans ou plus</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">- Antécédents familiaux de
												maladie coronaire précoce</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">- Tabagisme (ou arrêté depuis
												moins de trois ans)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">- Hypertension
												artérielle</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">- Diabète de type 2</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">- HDL cholestérol &lt; 0.40 g/l
												(mais facteur protecteur si HDL &gt; 0.60
												g/l)</c:td>
												</c:tr>
											</c:tbody>
										</c:table>
										<c:br/></c:text>

									<!-- Entrée FR-Resultats-examens-de-biologie-medicale : "Bilan lipidique" -->
									<c:entry typeCode="DRIV">
										<!-- Conformité Laboratory Report Data Processing Entry (IHE PALM) -->
										<c:templateId root="1.3.6.1.4.1.19376.1.3.1"/>
										<!-- Conformité FR-Resultats-examens-de-biologie-medicale (CI-SIS) -->
										<c:templateId root="1.2.250.1.213.1.1.3.21"/>
										<c:act classCode="ACT" moodCode="EVN">
											<c:code code="57698-3" displayName="Bilan lipidique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC"/>
											<c:statusCode code="completed"/>
											<!-- Entrée FR-Batterie-examens-de-biologie-medicale  -->
											<c:entryRelationship typeCode="COMP">
												<c:organizer classCode="BATTERY" moodCode="EVN">
												<!-- Conformité Laboratory Battery Organizer (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.4"/>
												<!-- Conformité FR-Batterie-examens-de-biologie-medicale (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.78"/>
												<c:statusCode code="completed"/>

												<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
												<c:component>
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="2571-8"
												displayName="Triglycérides [Masse/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="Triglycerides"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="0.62" unit="g/L">
												<!-- unité secondaire -->
												<c:translation value="0.71" code="mmol/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#BL0002"/></c:originalText>
												</c:methodCode>
												<c:referenceRange typeCode="REFV">
												<c:observationRange>
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="0.50" unit="g/L">
												<!-- unité secondaire -->
												<c:translation value="0.57" code="mmol/L"/>
												</c:low>
												<c:high value="1.50" unit="g/L">
												<!-- unité secondaire -->
												<c:translation value="1.71" code="mmol/L"/>
												</c:high>
												</c:value>
												<c:interpretationCode code="N"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
												</c:component>

												<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
												<c:component>
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="2093-3"
												displayName="Cholestérol [Masse/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="Cholesterol"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="1.90" unit="g/L">
												<c:translation value="4.90" code="mmol/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#BL0003"/></c:originalText>
												</c:methodCode>
												<c:referenceRange typeCode="REFV">
												<c:observationRange>
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="1.50" unit="g/L">
												<c:translation value="3.87" code="mmol/L"/>
												</c:low>
												<c:high value="2.00" unit="g/L">
												<c:translation value="5.16" code="mmol/L"/>
												</c:high>
												</c:value>
												<c:interpretationCode code="N"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
												</c:component>

												<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
												<c:component>
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="2085-9"
												displayName="Cholestérol HDL [Masse/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="hdl"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="0.73" unit="g/L"/>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#BL0004"/></c:originalText>
												</c:methodCode>
												<c:referenceRange typeCode="REFV">
												<c:observationRange>
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="0.40" unit="g/L"/>
												<c:high value="1.00" unit="g/L"/>
												</c:value>
												<c:interpretationCode code="N"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
												</c:component>

												<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
												<c:component>
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="13457-7"
												displayName="Cholestérol LDL [Masse/Volume] Sérum/Plasma ; Numérique ; Résultat calculé"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="ldl"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="1.05" unit="g/L"/>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#BL0005"/></c:originalText>
												</c:methodCode>
												<c:referenceRange typeCode="REFV">
												<c:observationRange>
												<c:value xsi:type="c:IVL_PQ">
												<c:high value="1.60" unit="g/L"/>
												</c:value>
												<c:interpretationCode code="N"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
												</c:component>
												</c:organizer>
											</c:entryRelationship>
										</c:act>
									</c:entry>

								</c:section>
							</c:component>

							<!-- Section FR-CR-BIO-Sous-Chapitre : "Biochimie" -->
							<c:component>
								<c:section>
									<!-- Conformité Laboratory Report Item Section (IHE PALM) -->
									<c:templateId root="1.3.6.1.4.1.19376.1.3.3.2.2"/>
									<!-- Conformité FR-CR-BIO-Sous-Chapitre (CI-SIS) -->
									<c:templateId root="1.2.250.1.213.1.1.2.71"/>
									<!-- Code générique de biochimie, faute de code spécialisé pour biochimie sanguine -->
									<c:code code="18719-5" displayName="Biochimie"
										codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
									<c:text>
										<c:table border="0">
											<c:thead align="center">
												<c:tr align="left">
												<c:th styleCode="Bold">AUTRES EXAMENS DE BIOCHIMIE
												SANGUINE</c:th>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th>Valeurs de référence</c:th>
												</c:tr>
											</c:thead>
											<c:tbody align="center">
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">Glycémie à jeun</c:td>
												<c:td/>
												<c:td align="right">0.88</c:td>
												<c:td align="left">g/l</c:td>
												<c:td/>
												<c:td align="left">(0.70 - 1.08)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">
												<c:content ID="ABS0001">...(UV
												Hexokinase)</c:content>
												</c:td>
												<c:td/>
												<c:td align="right">4.89</c:td>
												<c:td align="left">mmol/l</c:td>
												<c:td/>
												<c:td align="left">(3.89 - 6.00)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">Transaminases GOT (ASAT)</c:td>
												<c:td/>
												<c:td align="right" styleCode="Bold">45</c:td>
												<c:td align="left">UI/l</c:td>
												<c:td/>
												<c:td align="left">(10 - 50)</c:td>
												</c:tr>
												<c:tr align="left">
												<c:td align="left">
												<c:content ID="ABS0002">...(IFCC avec
												P5P)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">Transaminases GPT (ALAT)</c:td>
												<c:td/>
												<c:td align="right" styleCode="Bold">49</c:td>
												<c:td align="left">UI/l</c:td>
												<c:td/>
												<c:td align="left">(10 - 50)</c:td>
												</c:tr>
												<c:tr align="left">
												<c:td align="left">
												<c:content ID="ABS0003">...(IFCC avec
												P5P)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">Gamma G.T.</c:td>
												<c:td/>
												<c:td align="right" styleCode="Bold">65</c:td>
												<c:td align="left">UI/l</c:td>
												<c:td/>
												<c:td align="left">(4 - 60)</c:td>
												</c:tr>
												<c:tr align="right">
												<c:td align="left">
												<c:content ID="ABS0004">...(Colorimétrie
												enzymatique)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
											</c:tbody>
										</c:table>
										<c:br/></c:text>

									<!-- Entrée FR-Resultats-examens-de-biologie-medicale : "Biochimie" -->
									<c:entry typeCode="DRIV">
										<!-- Conformité Laboratory Report Data Processing Entry (IHE PALM) -->
										<c:templateId root="1.3.6.1.4.1.19376.1.3.1"/>
										<!-- Conformité FR-Resultats-examens-de-biologie-medicale (CI-SIS) -->
										<c:templateId root="1.2.250.1.213.1.1.3.21"/>
										<c:act classCode="ACT" moodCode="EVN">
											<!-- Code générique de biochimie, faute de code spécialisé pour biochimie sanguine -->
											<c:code code="18719-5" displayName="Biochimie"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC"/>
											<c:statusCode code="completed"/>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="53049-3"
												displayName="Glucose à jeun [Masse/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="glucose"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="0.88" unit="g/L">
												<!-- unité secondaire -->
												<c:translation value="4.89" code="mmol/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#ABS0001"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="0.70" unit="g/L">
												<c:translation value="3.89" code="mmol/L"/>
												</c:low>
												<c:high value="1.08" unit="g/L">
												<c:translation value="6.00" code="mmol/L"/>
												</c:high>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="30239-8"
												displayName="Aspartate aminotransférase [Catalytique/Volume] Sérum/Plasma ; Numérique ; Avec phosphate de pyridoxal"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="aspartate"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="45" unit="[IU]/L"/>
												<c:interpretationCode code="H"
												displayName="Anormalement haut"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#ABS0002"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="10" unit="[IU]/L"/>
												<c:high value="50" unit="[IU]/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="1743-4"
												displayName="Alanine aminotransférase [Catalytique/Volume] Sérum/Plasma ; Numérique ; Avec phosphate de pyridoxal"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="alanine"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="49" unit="[IU]/L"/>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#ABS0003"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="10" unit="[IU]/L"/>
												<c:high value="50" unit="[IU]/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="2324-2"
												displayName="Gamma glutamyltransférase [Catalytique/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="gamma"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="65" unit="[IU]/L"/>
												<c:interpretationCode code="H"
												displayName="Anormalement haut"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#ABS0004"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="4" unit="[IU]/L"/>
												<c:high value="60" unit="[IU]/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>
										</c:act>
									</c:entry>
								</c:section>
							</c:component>

							<!-- Section FR-CR-BIO-Sous-Chapitre : "Biochimie" -->
							<c:component>
								<c:section>
									<!-- Conformité Laboratory Report Item Section (IHE PALM) -->
									<c:templateId root="1.3.6.1.4.1.19376.1.3.3.2.2"/>
									<!-- Conformité FR-CR-BIO-Sous-Chapitre (CI-SIS) -->
									<c:templateId root="1.2.250.1.213.1.1.2.71"/>
									<!-- Code générique de biochimie, faute de code spécialisé pour dosage des protéines -->
									<c:code code="18719-5" displayName="Biochimie"
										codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
									<c:text>
										<c:table border="0">
											<c:thead align="center">
												<c:tr align="left">
												<c:th styleCode="Bold">DOSAGE DES
												PROTEINES.................................</c:th>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th>Valeurs de référence</c:th>
												</c:tr>
											</c:thead>
											<c:tbody align="center">
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">CRP</c:td>
												<c:td/>
												<c:td align="right">&lt;1.0</c:td>
												<c:td align="left">mg/l</c:td>
												<c:td/>
												<c:td align="left">(&lt; 5.0)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">
												<c:content ID="PR0001"
												>...(Immunoturbidimétrie)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
											</c:tbody>
										</c:table>
										<c:br/></c:text>

									<!-- Entrée FR-Resultats-examens-de-biologie-medicale : "Biochimie" -->
									<c:entry typeCode="DRIV">
										<!-- Conformité Laboratory Report Data Processing Entry (IHE PALM) -->
										<c:templateId root="1.3.6.1.4.1.19376.1.3.1"/>
										<!-- Conformité FR-Resultats-examens-de-biologie-medicale (CI-SIS) -->
										<c:templateId root="1.2.250.1.213.1.1.3.21"/>
										<c:act classCode="ACT" moodCode="EVN">
											<!-- Code générique de biochimie, faute de code spécialisé pour dosage des protéines -->
											<c:code code="18719-5" displayName="Biochimie"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC"/>
											<c:statusCode code="completed"/>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="1988-5"
												displayName="C Réactive protéine [Masse/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="CReactive"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:ED">&lt;1.0 mg/L</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#PR0001"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:high value="5.0" unit="mg/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>
										</c:act>
									</c:entry>
								</c:section>
							</c:component>

							<!-- Section FR-CR-BIO-Sous-Chapitre : "Biochimie" -->
							<c:component>
								<c:section>
									<!-- Conformité Laboratory Report Item Section (IHE PALM) -->
									<c:templateId root="1.3.6.1.4.1.19376.1.3.3.2.2"/>
									<!-- Conformité FR-CR-BIO-Sous-Chapitre (CI-SIS) -->
									<c:templateId root="1.2.250.1.213.1.1.2.71"/>
									<!-- Code générique de biochimie, faute de code panel pour bilan thyroidien -->
									<c:code code="18719-5" displayName="Biochimie"
										codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC"/>
									<c:text>
										<c:table border="0">
											<c:thead align="center">
												<c:tr align="left">
												<c:th styleCode="Bold">BILAN
												THYROIDIEN....................................</c:th>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th/>
												<c:th>Valeurs de référence</c:th>
												</c:tr>
											</c:thead>
											<c:tbody align="center">
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">Thyréostimuline (TSH)</c:td>
												<c:td/>
												<c:td align="right">2.050</c:td>
												<c:td align="left">mUI/l</c:td>
												<c:td/>
												<c:td align="left">(0.270 - 4.200)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">
												<c:content ID="TH0001">...(ECL
												Modular)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
												<c:tr>
												<c:td align="left" colspan="6">.</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">Thyroxine libre (FT4)</c:td>
												<c:td/>
												<c:td align="right">7.67</c:td>
												<c:td align="left">pg/ml</c:td>
												<c:td/>
												<c:td align="left">(9.30 - 17.00)</c:td>
												</c:tr>
												<c:tr>
												<c:td align="left">
												<c:content ID="TH0002">...(ECL
												Modular)</c:content>
												</c:td>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												<c:td/>
												</c:tr>
											</c:tbody>
										</c:table>
										<c:br/></c:text>

									<!-- Entrée FR-Resultats-examens-de-biologie-medicale : "Biochimie" -->
									<c:entry typeCode="DRIV">
										<!-- Conformité Laboratory Report Data Processing Entry (IHE PALM) -->
										<c:templateId root="1.3.6.1.4.1.19376.1.3.1"/>
										<!-- Conformité FR-Resultats-examens-de-biologie-medicale (CI-SIS) -->
										<c:templateId root="1.2.250.1.213.1.1.3.21"/>
										<c:act classCode="ACT" moodCode="EVN">
											<!-- Code générique de biochimie, faute de code spécialisé pour bilan thyroidien -->
											<c:code code="18719-5" displayName="Biochimie"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC"/>
											<c:statusCode code="completed"/>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="3016-3"
												displayName="Thyréostimuline [Arbitraire/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="Thyreostimuline"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="2.050"
												unit="m[IU]/L"/>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#TH0001"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="0.270" unit="m[IU]/L"/>
												<c:high value="4.200" unit="m[IU]/L"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>

											<!-- Entrée FR-Resultat-examens-de-biologie-element-clinique-pertinent -->
											<c:entryRelationship typeCode="COMP">
												<c:observation classCode="OBS" moodCode="EVN">
												<!-- Conformité Laboratory Observation (IHE PALM) -->
												<c:templateId root="1.3.6.1.4.1.19376.1.3.1.6"/>
												<!-- Conformité FR-Resultat-examens-de-biologie-element-clinique-pertinent (CI-SIS) -->
												<c:templateId root="1.2.250.1.213.1.1.3.80"/>
												<c:code code="3024-7"
												displayName="Thyroxine libre [Masse/Volume] Sérum/Plasma ; Numérique"
												codeSystem="2.16.840.1.113883.6.1"
												codeSystemName="LOINC">
												<c:originalText><c:reference value="Thyroxine"/></c:originalText>
												</c:code>
												<c:statusCode code="completed"/>
												<c:effectiveTime value="20140402145521+0200"/>
												<c:value xsi:type="c:PQ" value="7.67" unit="pg/mL"/>
												<c:interpretationCode code="L"
												displayName="Anormalement bas"
												codeSystem="2.16.840.1.113883.5.83"/>
												<c:methodCode>
												<c:originalText><c:reference value="#TH0002"/></c:originalText>
												</c:methodCode>
												<!-- Intervalle de valeurs de référence -->
												<c:referenceRange typeCode="REFV">
												<c:observationRange classCode="OBS"
												moodCode="EVN.CRT">
												<c:value xsi:type="c:IVL_PQ">
												<c:low value="9.30" unit="pg/mL"/>
												<c:high value="17.00" unit="pg/mL"/>
												</c:value>
												<c:interpretationCode code="N"
												displayName="Normal"
												codeSystem="2.16.840.1.113883.5.83"/>
												</c:observationRange>
												</c:referenceRange>
												</c:observation>
											</c:entryRelationship>
										</c:act>
									</c:entry>
								</c:section>
							</c:component>

						</c:section>
					</c:component>
				</c:structuredBody>
			</c:component>
		</c:ClinicalDocument>
	</data:Contenu>

	<!-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: -->
	<!--         Feuille de style XSLT pour CR auto-présentable du LBM des Charmes  -->


	<xsl:param name="vocFile" select="'../FeuilleDeStyle/cda_l10n.xml'"/>

	<xsl:variable name="vocMessages" select="document($vocFile)"/>

	<xsl:variable name="textLangPartLowerCase" select="substring($textLangLowerCase, 1, 2)"/>

	<xsl:variable name="textLangDefaultPartLowerCase"
		select="substring($textLangDefaultLowerCase, 1, 2)"/>

	<xsl:param name="textlangDefault" select="'fr-fr'"/>


	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myMargin">
		<xsl:attribute name="margin-top">20px</xsl:attribute>
		<xsl:attribute name="margin-left">5px</xsl:attribute>
		<xsl:attribute name="margin-bottom">0</xsl:attribute>
		<xsl:attribute name="margin-right">5px</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBorder">
		<xsl:attribute name="border">solid 0.1mm black</xsl:attribute>
		<xsl:attribute name="width">100%</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock3">
		<xsl:attribute name="font-size">6</xsl:attribute>
		<xsl:attribute name="font-weight">normal</xsl:attribute>
		<xsl:attribute name="background-color">#DCF0FF</xsl:attribute>
		<xsl:attribute name="color">black</xsl:attribute>
		<xsl:attribute name="border">solid 0.1mm black</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock5">
		<xsl:attribute name="font-size">6</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		<xsl:attribute name="font-style">italic</xsl:attribute>
		<xsl:attribute name="margin-left">10px</xsl:attribute>
	</xsl:attribute-set>


	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock6">
		<xsl:attribute name="font-size">6</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
		<xsl:attribute name="background-color">white</xsl:attribute>
		<xsl:attribute name="color">rgb(0,51,102)</xsl:attribute>
		<xsl:attribute name="border">solid 0.1mm black</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock7">
		<xsl:attribute name="font-size">6</xsl:attribute>
		<xsl:attribute name="font-weight">normal</xsl:attribute>
		<xsl:attribute name="background-color">white</xsl:attribute>
		<xsl:attribute name="color">rgb(0,51,102)</xsl:attribute>
		<xsl:attribute name="border">solid 0.1mm black</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock13">
		<xsl:attribute name="font-size">7</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock14">
		<xsl:attribute name="font-size">7</xsl:attribute>
		<xsl:attribute name="font-weight">normal</xsl:attribute>
	</xsl:attribute-set>

	<!-- Extension FR : PDF -->
	<xsl:attribute-set name="myBlock15">
		<xsl:attribute name="font-size">7</xsl:attribute>
		<xsl:attribute name="font-weight">bold</xsl:attribute>
	</xsl:attribute-set>


	<xsl:param name="limit-pdf" select="'no'"/>

	<!-- Extension FR : PDF -->
	<xsl:variable name="vendor" select="system-property('xsl:vendor')"/>

	<xsl:param name="textLang">
		<xsl:choose>
			<xsl:when test="/c:ClinicalDocument/c:languageCode/@code">
				<xsl:value-of select="/c:ClinicalDocument/c:languageCode/@code"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$textlangDefault"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:param>

	<xsl:variable name="textLangLowerCase">
		<xsl:call-template name="caseDown">
			<xsl:with-param name="data" select="$textLang"/>
		</xsl:call-template>
	</xsl:variable>

	<xsl:variable name="textLangDefaultLowerCase">
		<xsl:call-template name="caseDown">
			<xsl:with-param name="data" select="$textlangDefault"/>
		</xsl:call-template>
	</xsl:variable>

	<xsl:variable name="renderElement"
		select="self::c:nonXMLBody/c:text | self::c:observationMedia/c:value"/>

	<xd:doc>
		<xd:desc>
			<xd:p>Non XML Body</xd:p>
		</xd:desc>
	</xd:doc>
	<xsl:variable name="nonXML" select="//c:ClinicalDocument/c:component/c:nonXMLBody"/>

	<xd:doc>
		<xd:desc>
			<xd:p>Main template. Triggers on all top level ClinicalDocument elements</xd:p>
		</xd:desc>
	</xd:doc>
	<xsl:template match="/">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:apply-templates select="//c:ClinicalDocument"/>
		</xsl:if>
		<!-- Extension FR : PDF -->
		<!-- Test si PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
				<fo:layout-master-set>
					<fo:simple-page-master master-name="only">
						<fo:region-body region-name="xsl-region-body"/>
					</fo:simple-page-master>
				</fo:layout-master-set>
				<fo:page-sequence master-reference="only">
					<fo:flow flow-name="xsl-region-body">
						<xsl:apply-templates select="//c:ClinicalDocument"/>
					</fo:flow>
				</fo:page-sequence>
				<xsl:if test="$nonXML">
					<xsl:call-template name="encodedPdf"/>
				</xsl:if>
				<xsl:for-each select="descendant::c:observationMedia">
					<xsl:if test="c:value[@mediaType = 'application/pdf']">
						<xsl:if
							test="not(preceding::c:templateId[@root = '1.2.250.1.213.1.1.2.243'])">
							<xsl:variable name="id" select="@ID"/>
							<xsl:variable name="value"
								select="translate(normalize-space(c:value[@mediaType = 'application/pdf']/text()), ' ', '')"/>
							<fox:external-document content-type="pdf" id="{$id}">
								<xsl:attribute name="src">
									<xsl:value-of
										select="concat('data:', 'application/pdf', ';base64,', $value)"
									/>
								</xsl:attribute>
							</fox:external-document>
						</xsl:if>
					</xsl:if>
				</xsl:for-each>
			</fo:root>
		</xsl:if>
	</xsl:template>


	<!-- Extension FR : PDF -->
	<!-- Encoded nonXMLBody PDF -->
	<xd:doc>
		<xd:desc>
			<xd:p>Encoded PDF FILE</xd:p>
		</xd:desc>
	</xd:doc>
	<xsl:template name="encodedPdf">
		<xsl:variable name="nonXMLText"
			select="//c:ClinicalDocument/c:component/c:nonXMLBody/c:text"/>
		<xsl:variable name="value" select="normalize-space($nonXMLText/text())"/>
		<fox:external-document content-type="pdf" id="nonXmlId">
			<xsl:attribute name="src">
				<xsl:value-of select="concat('data:', $nonXMLText/@mediaType, ';base64,', $value)"/>
			</xsl:attribute>
		</fox:external-document>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:ClinicalDocument">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<html>
				<head>
					<meta name="viewport" content="width=device-width, initial-scale=1"/>
					<style>
						@media screen and (max-width : 320px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 1px 0px 1px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 1px 0px 1px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 5px 0px 5px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}
						@media screen and (min-width : 320px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 2px 0px 2px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 2px 0px 2px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 10px 0px 10px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}
						
						@media screen and (min-width : 480px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 3px 0px 3px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 3px 0px 3px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 15px 0px 15px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}
						
						@media screen and (min-width : 600px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 3.76px 0px 3.76px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 3.76px 0px 3.76px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 18.8px 0px 18.8px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}
						
						@media screen and (min-width : 801px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 3.9px 0px 3.9px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 3.9px 0px 3.9px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 19.53px 0px 19.53px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}
						
						@media screen and (min-width : 1025px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 5px 0px 5px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 5px 0px 5px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 25px 0px 25px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}
						
						@media screen and (min-width : 1281px){
						    body{
						        font-family: Calibri, sans-serif;
						    }
						    h1{
						    }
						    h2{
						        margin: 0px;
						    }
						    table{
						        border-collapse: collapse;
						    }
						    th{
						        padding: 0px 6.25px 0px 6.25px;
						
						    }
						    tr{
						        font-weight: normal;
						    }
						    td{
						        padding: 0px 6.25px 0px 6.25px;
						    }
						    #header img,
						    #header p,
						    #header h2{
						        margin: 0px 31.25px 0px 31.25px;
						    }
						    .data{
						        font-style: italic;
						        color: rgb(0, 112, 192);
						    }
						}</style>
					<title>
						<xsl:value-of select="c:title"/>
					</title>
				</head>
				<body>
					<table id="header">
						<tr>
							<td>
								<xsl:call-template name="printLogo"/>
							</td>
							<td>
								<h2 class="data">
									<xsl:value-of select="c:custodian//c:name"/>
								</h2>
								<p>
									<span class="data">
										<xsl:call-template name="show-address">
											<xsl:with-param name="address"
												select="c:custodian//c:addr"/>
										</xsl:call-template>
										<xsl:for-each select="c:custodian//c:telecom[@use = 'PUB']">
											<xsl:call-template name="show-telecom">
												<xsl:with-param name="telecom" select="."/>
											</xsl:call-template>
											<br/>
										</xsl:for-each>
									</span> Médecin biologiste responsable: <xsl:call-template
										name="printNameAndId">
										<xsl:with-param name="ref"
											select="c:legalAuthenticator/c:assignedEntity"/>
									</xsl:call-template>
								</p>
							</td>
						</tr>
					</table>

					<h1 class="data">
						<xsl:value-of select="//c:title"/>
					</h1>
					<table class="header_table">
						<tbody>
							<tr>
								<td>
									<span class="td_label">
										<xsl:text>Produit le</xsl:text>
									</span>
								</td>
								<td>
									<xsl:call-template name="printDate">
										<xsl:with-param name="date" select="c:effectiveTime/@value"
										/>
									</xsl:call-template>
								</td>
							</tr>
							<xsl:call-template name="show-patient-name">
								<xsl:with-param name="name"
									select="c:recordTarget//c:patient/c:name"/>
							</xsl:call-template>
							<tr>
								<td width="20%">
									<span class="td_label">
										<xsl:choose>
											<xsl:when
												test="c:recordTarget//c:patient/*[local-name() = 'deceasedInd'][@value = 'true' or @nullFlavor] | c:recordTarget//c:patient/*[local-name() = 'deceasedTime']">
												<xsl:text>Date de naissance / de décès</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:text>Date de naissance</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</span>
								</td>
								<td width="80%">
									<xsl:choose>
										<xsl:when
											test="c:recordTarget//c:patient/*[local-name() = 'deceasedInd'][@value = 'true' or @nullFlavor] | c:recordTarget//c:patient/*[local-name() = 'deceasedTime']">
											<xsl:call-template name="show-time">
												<xsl:with-param name="datetime"
												select="c:recordTarget//c:patient/c:birthTime"/>
											</xsl:call-template>
											<xsl:text> - &#8224; </xsl:text>
											<xsl:call-template name="show-time">
												<xsl:with-param name="datetime"
												select="c:recordTarget//c:patient/*[local-name() = 'deceasedTime']"
												/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="show-time">
												<xsl:with-param name="datetime"
												select="c:recordTarget//c:patient/c:birthTime"/>
											</xsl:call-template>
										</xsl:otherwise>
									</xsl:choose>
								</td>
							</tr>
							<tr>
								<td width="15%">
									<span class="td_label">
										<xsl:text>Sexe</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each
										select="c:recordTarget//c:patient/c:administrativeGenderCode">
										<xsl:call-template name="show-gender"/>
									</xsl:for-each>
								</td>
							</tr>
							<xsl:if test="c:recordTarget//c:patient/c:birthplace/c:place">
								<tr>
									<td width="20%">
										<span class="td_label">
											<xsl:text>Lieu de naissance</xsl:text>
										</span>
									</td>
									<td colspan="3">
										<xsl:if
											test="c:recordTarget//c:patient/c:birthplace/c:place/c:name">
											<xsl:call-template name="show-name">
												<xsl:with-param name="name"
												select="c:recordTarget//c:patient/c:birthplace/c:place/c:name"
												/>
											</xsl:call-template>
										</xsl:if>
										<xsl:if
											test="c:recordTarget//c:patient/c:birthplace/c:place/c:addr">
											<xsl:call-template name="show-address-city">
												<xsl:with-param name="address"
												select="c:recordTarget//c:patient/c:birthplace/c:place/c:addr"
												/>
											</xsl:call-template>
										</xsl:if>
									</td>
								</tr>
								<tr>
									<td width="20%">
										<xsl:if
											test="c:recordTarget//c:patient/c:birthplace/c:place/c:addr/c:county">
											<span class="td_label">
												<xsl:text>Code INSEE du lieu de naissance</xsl:text>
											</span>
										</xsl:if>
									</td>
									<td colspan="3">
										<xsl:if
											test="c:recordTarget//c:patient/c:birthplace/c:place/c:addr">
											<xsl:call-template name="show-address-county">
												<xsl:with-param name="address"
												select="c:recordTarget//c:patient/c:birthplace/c:place/c:addr"
												/>
											</xsl:call-template>
										</xsl:if>
									</td>
								</tr>
							</xsl:if>
							<tr>
								<td>
									<span class="td_label">
										<xsl:text>Adresse</xsl:text>
									</span>
								</td>
								<td>
									<xsl:call-template name="show-address-patient">
										<xsl:with-param name="address"
											select="c:recordTarget/c:patientRole/c:addr"/>
									</xsl:call-template>
								</td>
							</tr>
							<xsl:for-each select="c:recordTarget/c:patientRole/c:telecom">
								<tr>
									<td>
										<span class="td_label">
											<xsl:text>Telécom</xsl:text>
										</span>
									</td>
									<td>
										<xsl:call-template name="show-telecom">
											<xsl:with-param name="telecom" select="."/>
										</xsl:call-template>
									</td>
								</tr>
							</xsl:for-each>
							<tr>
								<td>
									<span class="td_label">
										<xsl:text>INS</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="c:recordTarget/c:patientRole/c:id">
										<xsl:choose>
											<xsl:when test="@root = '1.2.250.1.213.1.4.8'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[NIR]</xsl:text>
											</xsl:when>
											<xsl:when test="@root = '1.2.250.1.213.1.4.9'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[NIA]</xsl:text>
											</xsl:when>
											<xsl:when test="@root = '1.2.250.1.213.1.4.10'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[TEST]</xsl:text>
											</xsl:when>
											<xsl:when test="@root = '1.2.250.1.213.1.4.11'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[DEMO]</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:text>&#160;</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td>
									<span class="td_label">
										<xsl:text>IPP</xsl:text>
									</span>
								</td>
								<td>
									<xsl:for-each select="c:recordTarget/c:patientRole/c:id">
										<xsl:if
											test="
												(@root != '1.2.250.1.213.1.4.8') and (@root != '1.2.250.1.213.1.4.9')
												and (@root != '1.2.250.1.213.1.4.10') and (@root != '1.2.250.1.213.1.4.11')">
											<xsl:call-template name="show-id">
												<xsl:with-param name="id" select="."/>
											</xsl:call-template>
										</xsl:if>
									</xsl:for-each>
								</td>
							</tr>
							<tr>
								<td>
									<span class="td_label">
										<xsl:text>Représentant du patient</xsl:text>
									</span>
								</td>
								<td>
									<xsl:if test="c:recordTarget//c:patient/c:guardian">
										<xsl:for-each select="c:recordTarget//c:patient/c:guardian">
											<xsl:call-template name="show-guardian">
												<xsl:with-param name="guardian" select="."/>
											</xsl:call-template>
										</xsl:for-each>
									</xsl:if>
								</td>
							</tr>
						</tbody>
					</table>
					<p> Demande d'examens <span class="data">
							<xsl:value-of select="c:documentationOf/c:serviceEvent/c:id/@extension"
							/>
						</span> prescrite le <xsl:call-template name="printDate">
							<xsl:with-param name="date"
								select="c:participant[@typeCode = 'REF']/c:time/c:high/@value"/>
						</xsl:call-template> par <xsl:call-template name="printNameAndId">
							<xsl:with-param name="ref"
								select="c:participant[@typeCode = 'REF']/c:associatedEntity"/>
						</xsl:call-template>
						<br/> Echantillons biologiques prélevés le <xsl:call-template
							name="printDate">
							<xsl:with-param name="date"
								select="c:participant[@typeCode = 'PRF']/c:time/c:high/@value"/>
						</xsl:call-template> par <xsl:call-template name="printNameAndId">
							<xsl:with-param name="ref"
								select="c:participant[@typeCode = 'PRF']/c:associatedEntity"/>
						</xsl:call-template>
						<br/> Examens réalisés du <xsl:call-template name="printDate">
							<xsl:with-param name="date"
								select="c:documentationOf/c:serviceEvent/c:effectiveTime/c:low/@value"
							/>
						</xsl:call-template> au <xsl:call-template name="printDate">
							<xsl:with-param name="date"
								select="c:documentationOf/c:serviceEvent/c:effectiveTime/c:high/@value"
							/>
						</xsl:call-template>
					</p>
					<xsl:apply-templates select="c:component/c:structuredBody"/>
					<br/>
					<table>
						<tr>
							<th>Biologistes médicaux ayant participé à l'interprétation du compte
								rendu</th>
							<th>Date &amp; heure</th>
						</tr>

						<xsl:for-each select="c:authenticator">
							<tr>
								<td>
									<xsl:call-template name="printNameAndId">
										<xsl:with-param name="ref" select="c:assignedEntity"/>
									</xsl:call-template>

								</td>
								<td>
									<xsl:call-template name="printDateAndTime">
										<xsl:with-param name="date" select="c:time/@value"/>
									</xsl:call-template>
								</td>
							</tr>
						</xsl:for-each>
						<xsl:if test="not(c:authenticator/c:assignedEntity)">
							<tr>
								<td>
									<xsl:call-template name="printNameAndId">
										<xsl:with-param name="ref"
											select="c:legalAuthenticator/c:assignedEntity"/>
									</xsl:call-template>
								</td>
								<td>
									<xsl:call-template name="printDateAndTime">
										<xsl:with-param name="date"
											select="c:legalAuthenticator/c:time/@value"/>
									</xsl:call-template>
								</td>
							</tr>
						</xsl:if>
						<tr>
							<td>
								<xsl:call-template name="directeur_signe"/>
							</td>
						</tr>
					</table>
				</body>
			</html>
		</xsl:if>
		<xsl:if test="contains($vendor, 'Saxonica')">
			<fo:block xsl:use-attribute-sets="myMargin" keep-together.within-page="always">
				<fo:table>
					<fo:table-column column-number="1" column-width="10%"/>
					<fo:table-column column-number="2" column-width="90%"/>
					<fo:table-body>
						<fo:table-row>
							<fo:table-cell>
								<fo:block>
									<xsl:call-template name="printLogo"/>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="12" font-style="italic"
									color="rgb(0, 112, 192)" font-weight="bold">
									<xsl:value-of select="c:custodian//c:name"/>
								</fo:block>
								<fo:block font-style="italic" color="rgb(0, 112, 192)">
									<fo:block line-height="0.1cm">&#160;</fo:block>
									<xsl:call-template name="show-address">
										<xsl:with-param name="address" select="c:custodian//c:addr"
										/>
									</xsl:call-template>
									<xsl:for-each select="c:custodian//c:telecom[@use = 'PUB']">
										<xsl:call-template name="show-telecom">
											<xsl:with-param name="telecom" select="."/>
										</xsl:call-template>
									</xsl:for-each>
								</fo:block>
								<fo:block>
									<fo:inline font-size="8"> Médecin biologiste responsable:
											<xsl:call-template name="printNameAndId">
											<xsl:with-param name="ref"
												select="c:legalAuthenticator/c:assignedEntity"/>
										</xsl:call-template>
									</fo:inline>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
					</fo:table-body>
				</fo:table>
			</fo:block>
			<fo:block line-height="0.5cm">&#160;</fo:block>
			<fo:block font-style="italic" color="rgb(0, 112, 192)" font-weight="bold">
				<xsl:value-of select="c:title"/>
			</fo:block>
			<fo:block line-height="0.5cm">&#160;</fo:block>
			<fo:block>
				<fo:table>
					<fo:table-column column-number="1" column-width="30%"/>
					<fo:table-column column-number="2" column-width="45%"/>
					<fo:table-body>
						<fo:table-row>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:text>Produit le</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="8" font-style="italic" color="rgb(0, 112, 192)">
									<xsl:call-template name="printDate">
										<xsl:with-param name="date" select="c:effectiveTime/@value"
										/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
						<fo:table-row>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:call-template name="show-patient-name">
										<xsl:with-param name="name"
											select="c:recordTarget//c:patient/c:name"/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:call-template name="show-patient-name-field">
										<xsl:with-param name="name"
											select="c:recordTarget//c:patient/c:name"/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>

						<fo:table-row>
							<fo:table-cell>
								<fo:block font-size="8" width="20%">
									<xsl:choose>
										<xsl:when
											test="c:recordTarget//c:patient/*[local-name() = 'deceasedInd'][@value = 'true' or @nullFlavor] | c:recordTarget//c:patient/*[local-name() = 'deceasedTime']">
											<xsl:text>Date de naissance / de décès</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<xsl:text>Date de naissance</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block width="80%" font-size="8">
									<xsl:choose>
										<xsl:when
											test="c:recordTarget//c:patient/*[local-name() = 'deceasedInd'][@value = 'true' or @nullFlavor] | c:recordTarget//c:patient/*[local-name() = 'deceasedTime']">
											<xsl:call-template name="show-time">
												<xsl:with-param name="datetime"
												select="c:recordTarget//c:patient/c:birthTime"/>
											</xsl:call-template>
											<xsl:text> - &#8224; </xsl:text>
											<xsl:call-template name="show-time">
												<xsl:with-param name="datetime"
												select="c:recordTarget//c:patient/*[local-name() = 'deceasedTime']"
												/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="show-time">
												<xsl:with-param name="datetime"
												select="c:recordTarget//c:patient/c:birthTime"/>
											</xsl:call-template>
										</xsl:otherwise>
									</xsl:choose>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>

						<fo:table-row>
							<fo:table-cell>
								<fo:block width="20%" font-size="8">
									<xsl:text>Sexe</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:for-each
										select="c:recordTarget//c:patient/c:administrativeGenderCode">
										<xsl:call-template name="show-gender"/>
									</xsl:for-each>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>

						<fo:table-row>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:text>Lieu de naissance</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:if
										test="c:recordTarget//c:patient/c:birthplace/c:place/c:name">
										<xsl:call-template name="show-name">
											<xsl:with-param name="name"
												select="c:recordTarget//c:patient/c:birthplace/c:place/c:name"
											/>
										</xsl:call-template>
									</xsl:if>
									<xsl:if
										test="c:recordTarget//c:patient/c:birthplace/c:place/c:addr">
										<xsl:call-template name="show-address-city">
											<xsl:with-param name="address"
												select="c:recordTarget//c:patient/c:birthplace/c:place/c:addr"
											/>
										</xsl:call-template>
									</xsl:if>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>

						<fo:table-row>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:text>Code INSEE du lieu de naissance</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:if
										test="c:recordTarget//c:patient/c:birthplace/c:place/c:addr">
										<xsl:call-template name="show-address-county">
											<xsl:with-param name="address"
												select="c:recordTarget//c:patient/c:birthplace/c:place/c:addr"
											/>
										</xsl:call-template>
									</xsl:if>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
						<fo:table-row>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<xsl:text>Adresse</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<xsl:for-each select="c:recordTarget/c:patientRole/c:addr">
										<xsl:call-template name="show-address-patient">
											<xsl:with-param name="address" select="."/>
										</xsl:call-template>
										<fo:block line-height="0.1cm">&#160;</fo:block>
									</xsl:for-each>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
						<fo:table-row>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<xsl:text>Telécom</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<xsl:for-each select="c:recordTarget/c:patientRole/c:telecom">
										<xsl:call-template name="show-telecom">
											<xsl:with-param name="telecom" select="."/>
										</xsl:call-template>
										<fo:block line-height="0.1cm">&#160;</fo:block>
									</xsl:for-each>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
						<fo:table-row>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<fo:block line-height="0.1cm">&#160;</fo:block>
									<xsl:text>INS</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<fo:block line-height="0.1cm">&#160;</fo:block>
									<xsl:for-each select="c:recordTarget/c:patientRole/c:id">
										<xsl:choose>
											<xsl:when test="@root = '1.2.250.1.213.1.4.8'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[NIR]</xsl:text>
											</xsl:when>
											<xsl:when test="@root = '1.2.250.1.213.1.4.9'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[NIA]</xsl:text>
											</xsl:when>
											<xsl:when test="@root = '1.2.250.1.213.1.4.10'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[TEST]</xsl:text>
											</xsl:when>
											<xsl:when test="@root = '1.2.250.1.213.1.4.11'">
												<xsl:call-template name="show-identifiant">
												<xsl:with-param name="id" select="."/>
												</xsl:call-template>
												<xsl:text>&#160;</xsl:text>
												<xsl:text>[DEMO]</xsl:text>
											</xsl:when>
											<xsl:otherwise>
												<xsl:text>&#160;</xsl:text>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
						<fo:table-row>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:text>IPP</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-size="8">
									<xsl:for-each select="c:recordTarget/c:patientRole/c:id">
										<xsl:if
											test="
												(@root != '1.2.250.1.213.1.4.8') and (@root != '1.2.250.1.213.1.4.9')
												and (@root != '1.2.250.1.213.1.4.10') and (@root != '1.2.250.1.213.1.4.11')">
											<xsl:call-template name="show-id">
												<xsl:with-param name="id" select="."/>
											</xsl:call-template>
										</xsl:if>
									</xsl:for-each>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
						<fo:table-row>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<xsl:text>Représentant du patient</xsl:text>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block line-height="0.2cm">&#160;</fo:block>
								<fo:block font-size="8">
									<xsl:if test="c:recordTarget//c:patient/c:guardian">
										<xsl:for-each select="c:recordTarget//c:patient/c:guardian">
											<xsl:call-template name="show-guardian">
												<xsl:with-param name="guardian" select="."/>
											</xsl:call-template>
										</xsl:for-each>
									</xsl:if>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
					</fo:table-body>
				</fo:table>
			</fo:block>
			<fo:block line-height="0.5cm">&#160;</fo:block>
			<fo:block>
				<fo:inline font-size="8"><xsl:text>Demande d'examens </xsl:text>
					<fo:inline font-style="italic" color="rgb(0, 112, 192)"><xsl:value-of
							select="c:documentationOf/c:serviceEvent/c:id/@extension"/></fo:inline>
					prescrite le <fo:inline font-style="italic" color="rgb(0, 112, 192)"
							><xsl:call-template name="printDate">
							<xsl:with-param name="date"
								select="c:participant[@typeCode = 'REF']/c:time/c:high/@value"/>
						</xsl:call-template></fo:inline> par <fo:inline font-style="italic"
						color="rgb(0, 112, 192)"><xsl:call-template name="printNameAndId">
							<xsl:with-param name="ref"
								select="c:participant[@typeCode = 'REF']/c:associatedEntity"/>
						</xsl:call-template></fo:inline>
				</fo:inline>
				<fo:block line-height="0.1cm">&#160;</fo:block>
				<fo:inline font-size="8">Echantillons biologiques prélevés le <fo:inline
						font-style="italic" color="rgb(0, 112, 192)"><xsl:call-template
							name="printDate">
							<xsl:with-param name="date"
								select="c:participant[@typeCode = 'PRF']/c:time/c:high/@value"/>
						</xsl:call-template></fo:inline> par <fo:inline font-style="italic"
						color="rgb(0, 112, 192)"><xsl:call-template name="printNameAndId">
							<xsl:with-param name="ref"
								select="c:participant[@typeCode = 'PRF']/c:associatedEntity"/>
						</xsl:call-template></fo:inline>
				</fo:inline>
				<fo:block line-height="0.1cm">&#160;</fo:block>
				<fo:inline font-size="8">Examens réalisés du <fo:inline font-style="italic"
						color="rgb(0, 112, 192)"><xsl:call-template name="printDate">
							<xsl:with-param name="date"
								select="c:documentationOf/c:serviceEvent/c:effectiveTime/c:low/@value"
							/>
						</xsl:call-template></fo:inline> au <fo:inline font-style="italic"
						color="rgb(0, 112, 192)"><xsl:call-template name="printDate">
							<xsl:with-param name="date"
								select="c:documentationOf/c:serviceEvent/c:effectiveTime/c:high/@value"
							/>
						</xsl:call-template></fo:inline>
				</fo:inline>
			</fo:block>
			<fo:block line-height="0.5cm">&#160;</fo:block>
			<xsl:apply-templates select="c:component/c:structuredBody"/>
			<fo:block line-height="0.5cm">&#160;</fo:block>
			<fo:table>
				<fo:table-column column-number="1" column-width="70%"/>
				<fo:table-column column-number="2" column-width="30%"/>
				<fo:table-body>
					<fo:table-row>
						<fo:table-cell xsl:use-attribute-sets="myBlock15">
							<fo:block>
								<xsl:text>Biologistes médicaux ayant participé à l'interprétation du compte
								rendu</xsl:text>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell xsl:use-attribute-sets="myBlock15">
							<fo:block>
								<xsl:text>Date &amp; heure</xsl:text>
							</fo:block>
						</fo:table-cell>
					</fo:table-row>
					<xsl:for-each select="c:authenticator">
						<fo:table-row>
							<fo:table-cell>
								<fo:block font-style="italic" color="rgb(0, 112, 192)" font-size="7">
									<xsl:call-template name="printNameAndId">
										<xsl:with-param name="ref" select="c:assignedEntity"/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-style="italic" color="rgb(0, 112, 192)" font-size="7">
									<xsl:call-template name="printDateAndTime">
										<xsl:with-param name="date" select="c:time/@value"/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
					</xsl:for-each>
					<xsl:if test="not(c:authenticator/c:assignedEntity)">
						<fo:table-row>
							<fo:table-cell>
								<fo:block font-style="italic" color="rgb(0, 112, 192)" font-size="7">
									<xsl:call-template name="printNameAndId">
										<xsl:with-param name="ref"
											select="c:legalAuthenticator/c:assignedEntity"/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
							<fo:table-cell>
								<fo:block font-style="italic" color="rgb(0, 112, 192)" font-size="7">
									<xsl:call-template name="printDateAndTime">
										<xsl:with-param name="date"
											select="c:legalAuthenticator/c:time/@value"/>
									</xsl:call-template>
								</fo:block>
							</fo:table-cell>
						</fo:table-row>
					</xsl:if>
					<fo:table-row>
						<fo:table-cell>
							<fo:block>
								<xsl:call-template name="directeur_signe"/>
							</fo:block>
						</fo:table-cell>
						<fo:table-cell>
							<fo:block/>
						</fo:table-cell>
					</fo:table-row>
				</fo:table-body>
			</fo:table>

		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="ref"/>
	</xd:doc>
	<xsl:template name="printNameAndId">
		<xsl:param name="ref"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<span class="data">
				<xsl:value-of select="$ref/c:assignedPerson/c:name | $ref/c:associatedPerson/c:name"
				/>
			</span>
			<xsl:text>(</xsl:text>
			<span class="data">
				<xsl:value-of select="$ref//c:id/@extension"/>
			</span>
			<xsl:text>)</xsl:text>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:inline font-style="italic" color="rgb(0, 112, 192)">
				<xsl:value-of select="$ref/c:assignedPerson/c:name | $ref/c:associatedPerson/c:name"/>
				<xsl:text>(</xsl:text>
				<xsl:value-of select="$ref//c:id/@extension"/>
				<xsl:text>)</xsl:text>
			</fo:inline>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
		<xd:param name="date"/>
	</xd:doc>
	<xsl:template name="printDate">
		<xsl:param name="date"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<span class="data">
				<xsl:value-of select="substring($date, 7, 2)"/>
			</span>
			<xsl:text>/</xsl:text>
			<span class="data">
				<xsl:value-of select="substring($date, 5, 2)"/>
			</span>
			<xsl:text>/</xsl:text>
			<span class="data">
				<xsl:value-of select="substring($date, 1, 4)"/>
			</span>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:value-of select="substring($date, 7, 2)"/>
			<xsl:text>/</xsl:text>
			<xsl:value-of select="substring($date, 5, 2)"/>
			<xsl:text>/</xsl:text>
			<xsl:value-of select="substring($date, 1, 4)"/>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="date"/>
	</xd:doc>
	<xsl:template name="printDateAndTime">
		<xsl:param name="date"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:call-template name="printDate">
				<xsl:with-param name="date" select="$date"/>
			</xsl:call-template>
			<xsl:text> </xsl:text>
			<span class="data">
				<xsl:value-of select="substring($date, 9, 2)"/>
			</span>
			<xsl:text>:</xsl:text>
			<span class="data">
				<xsl:value-of select="substring($date, 11, 2)"/>
			</span>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:call-template name="printDate">
				<xsl:with-param name="date" select="$date"/>
			</xsl:call-template>
			<xsl:text> </xsl:text>
			<xsl:value-of select="substring($date, 9, 2)"/>
			<xsl:text>:</xsl:text>
			<xsl:value-of select="substring($date, 11, 2)"/>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template name="printLogo">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<img
				src="data:image/jpeg;base64,
				/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
				GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
				KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
				CABqADkDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAcGCAMEBQEC/8QANRAAAgED
				AwMDAgIIBwAAAAAAAQIDBAURABIhBgcxE0FRFCIyQggVI1JhgZGhFjNicXKC4f/EABQBAQAA
				AAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwC1OjRo
				0Bo0a5HVlxa1WCrqonVajaI4Ny7t0jHaoA9ySRoI11p1tNaXppbT6FRSCT0qmRoXkVHJwqko
				dwyfcK3t8g6mtFM9RSRyyQvA7D7o38qfcf8Auq73+pjr1stps8oerqLhT0tR9TKymObcxM5A
				YMp3KCuOCT4zzqxNHFJDSQRTSmeVEVXlIwXIHLY9s+dBmHOjRo0Bo0aNAaXXce9ejckgwFht
				8IqWdlyDUSExwY+dv7Rz/sNMKeWOngkmmcJFGpd2PhQBkk6rz3GuVdUMlG7KslzlMshP5Vcb
				QoGRyIRj43SjxydBrdq7Xb773Es10aQRVKQyV8cUshdpIAPTiBVsgPyGJX93OedWS1X/ALf2
				enuPX9vp1CrLQ0grKuWNAruiygwRuwA/Ou75+wjwdWA0Bo0aNAaNGtK93Ons1qqrhWttp6dC
				7HIGfgc8ZJwP56Dj9c1UAoIrfUS+mlWx9Ug4IhQb5Cf4EDb/ANtIUTSXzrSorhMjrTAovwjF
				svtx8YCHxj0xzzjXd7g9drVXjdSRYmajSlqaOR1kdHYiRAoTJIJZQSu7g8gcZgVRT3D6GKio
				ZGgEdPLNWSKSSvhiQByASRuOFz9uRgkEHb2rNFb+or3FKRHW3EwvGXGPUCR4KqffGC2B8sfn
				TS1V3o67VlytVrkkqxV1VFUR1EjQxrC8kEcmMquRjcF4PHvxwcOvtULlLY2rq6qklpKt3kp4
				5ZmldB6j+WbPttAAYgY40E30aNGg8dlRSzkKoGSScADUepeo+lepvqLZTXW03PdmOSmWdJd3
				yNueddLqK3C8dP3O2M20VtLLTFj7b0K5/vqjz2mt6M6nSw9QCptLpK2KqPY4IwxSZQ5CkDxj
				IyAQPgBOu2vQRvHc+522rt80dBRVhnqvsP0zorZTYcAZf7cKfyFscHVl+pOl7feSlTIopq+G
				Jo46yMAOqHyh/eQ+6/0wedILsx3QNu6jrbRVTQ19jkdppbmImhZJOBltyrxheQwyPlscszrj
				ufaaahqrbT/WxV00oo1aWmZVAYsGcFioICqW8jjkZ2sAC2ounamgSv8ARqzWXe+zLRUzRIwj
				jQ8AqMkgBdzkknxyT5Nj7Pb6e02mit1EuylpIUgiX4VVAH9hpO9nLzHeOu62nkUxyUVuWSNB
				hhukZd53D3AEYA/1t507dAaNGjQGqV92qPqWzdcXKTqr6262wTvNDDVyO1K8LPu2RO/CEADw
				TggDBAObRdyJb7TwUc9lp6yqokEv1kFFIsc7cDYVY84H3cLzyPYY0qrnfkklo4qeOb0KlkWd
				LveG21eSMxeg4IJI3ZOMDBI5wdAprtYV6U6lgNrqqG42p5VqaKIVJnikAJ2rIQfSzvjweAoY
				+wA1JLReE6x6mlo3ommtKUUkkcTO4MWwlysXolVGZMgf8FIB9pj090s13kuEVrsVNNS0imKn
				hrAPtLb4yWcnOMo3GD9gQjyRqd9VdJWix2Oxy01DTrX0UclKk6KVLK0ErOPPOWG7nODoOV+j
				9ZY6GWrrYg0YmttGBEx3bAWmcLuPJ2gqufcKNOXSf7DGdYqZHl3R/qG3sUI8H9pzpwaA0aNG
				gNcXqm3NV2avNBSUktyaF1hM8StliuMfcMeOOePnjXa0aCJdsemW6Y6aSGpXFfUt69T+H7W2
				hVT7eMKiqvHGQSPOvnuU0f6qpkYgyepIyoDyR6EoJx8c/wB9SyeaOCJpZpFjjUZLMcAaSnUE
				sN2udRcoG9OlqDI7PFLhdyIUyT7MQACPfbjQbXY+vSS5JAkbYkslL95QquYiQQM+f80eMjjT
				k1WvthUV1sje9iq+joqNZKUGWLEckW8n8T/lG1eV+PPkadHR3W9B1FbY6gq9M7hmXePtlQHA
				dD8EYIzz/TOglmjWGlqoKpN9NMkq8ZKnOMjPPxrNoD31guE8lNQVM8MD1EsUbOsKfikIGQo/
				ifGs+jQVyvndWvnro6ZbFdq6uXLSUjQPCsBzgBgVOCTwOCfOT8ybp/ovqS/OKu/JQ2uneRZT
				Txw/tGxkruOcj8Rzz8e+dOfRoE1fezVXcpkWj6jegpowXXdB9Ud+0LgrKSNoHtn+mt2j7e9V
				UcYh/wASUVREg2oy0S07EfJCgj+Q402NGgW/b7ovqGwdX3a6XS8RTUNZDHEtJGxcFkzh+VXa
				eW4Gc5/gNMjRo0H/2Q==
				"
			/>
		</xsl:if>
		<xsl:if test="contains($vendor, 'Saxonica')">
			<fo:external-graphic content-height="scale-to-fit" content-width="50%"
				scaling="non-uniform"
				src="data:image/jpeg;base64,
				/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
				GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
				KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
				CABqADkDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAcGCAMEBQEC/8QANRAAAgED
				AwMDAgIIBwAAAAAAAQIDBAURABIhBgcxE0FRFCIyQggVI1JhgZGhFjNicXKC4f/EABQBAQAA
				AAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwC1OjRo
				0Bo0a5HVlxa1WCrqonVajaI4Ny7t0jHaoA9ySRoI11p1tNaXppbT6FRSCT0qmRoXkVHJwqko
				dwyfcK3t8g6mtFM9RSRyyQvA7D7o38qfcf8Auq73+pjr1stps8oerqLhT0tR9TKymObcxM5A
				YMp3KCuOCT4zzqxNHFJDSQRTSmeVEVXlIwXIHLY9s+dBmHOjRo0Bo0aNAaXXce9ejckgwFht
				8IqWdlyDUSExwY+dv7Rz/sNMKeWOngkmmcJFGpd2PhQBkk6rz3GuVdUMlG7KslzlMshP5Vcb
				QoGRyIRj43SjxydBrdq7Xb773Es10aQRVKQyV8cUshdpIAPTiBVsgPyGJX93OedWS1X/ALf2
				enuPX9vp1CrLQ0grKuWNAruiygwRuwA/Ou75+wjwdWA0Bo0aNAaNGtK93Ons1qqrhWttp6dC
				7HIGfgc8ZJwP56Dj9c1UAoIrfUS+mlWx9Ug4IhQb5Cf4EDb/ANtIUTSXzrSorhMjrTAovwjF
				svtx8YCHxj0xzzjXd7g9drVXjdSRYmajSlqaOR1kdHYiRAoTJIJZQSu7g8gcZgVRT3D6GKio
				ZGgEdPLNWSKSSvhiQByASRuOFz9uRgkEHb2rNFb+or3FKRHW3EwvGXGPUCR4KqffGC2B8sfn
				TS1V3o67VlytVrkkqxV1VFUR1EjQxrC8kEcmMquRjcF4PHvxwcOvtULlLY2rq6qklpKt3kp4
				5ZmldB6j+WbPttAAYgY40E30aNGg8dlRSzkKoGSScADUepeo+lepvqLZTXW03PdmOSmWdJd3
				yNueddLqK3C8dP3O2M20VtLLTFj7b0K5/vqjz2mt6M6nSw9QCptLpK2KqPY4IwxSZQ5CkDxj
				IyAQPgBOu2vQRvHc+522rt80dBRVhnqvsP0zorZTYcAZf7cKfyFscHVl+pOl7feSlTIopq+G
				Jo46yMAOqHyh/eQ+6/0wedILsx3QNu6jrbRVTQ19jkdppbmImhZJOBltyrxheQwyPlscszrj
				ufaaahqrbT/WxV00oo1aWmZVAYsGcFioICqW8jjkZ2sAC2ounamgSv8ARqzWXe+zLRUzRIwj
				jQ8AqMkgBdzkknxyT5Nj7Pb6e02mit1EuylpIUgiX4VVAH9hpO9nLzHeOu62nkUxyUVuWSNB
				hhukZd53D3AEYA/1t507dAaNGjQGqV92qPqWzdcXKTqr6262wTvNDDVyO1K8LPu2RO/CEADw
				TggDBAObRdyJb7TwUc9lp6yqokEv1kFFIsc7cDYVY84H3cLzyPYY0qrnfkklo4qeOb0KlkWd
				LveG21eSMxeg4IJI3ZOMDBI5wdAprtYV6U6lgNrqqG42p5VqaKIVJnikAJ2rIQfSzvjweAoY
				+wA1JLReE6x6mlo3ommtKUUkkcTO4MWwlysXolVGZMgf8FIB9pj090s13kuEVrsVNNS0imKn
				hrAPtLb4yWcnOMo3GD9gQjyRqd9VdJWix2Oxy01DTrX0UclKk6KVLK0ErOPPOWG7nODoOV+j
				9ZY6GWrrYg0YmttGBEx3bAWmcLuPJ2gqufcKNOXSf7DGdYqZHl3R/qG3sUI8H9pzpwaA0aNG
				gNcXqm3NV2avNBSUktyaF1hM8StliuMfcMeOOePnjXa0aCJdsemW6Y6aSGpXFfUt69T+H7W2
				hVT7eMKiqvHGQSPOvnuU0f6qpkYgyepIyoDyR6EoJx8c/wB9SyeaOCJpZpFjjUZLMcAaSnUE
				sN2udRcoG9OlqDI7PFLhdyIUyT7MQACPfbjQbXY+vSS5JAkbYkslL95QquYiQQM+f80eMjjT
				k1WvthUV1sje9iq+joqNZKUGWLEckW8n8T/lG1eV+PPkadHR3W9B1FbY6gq9M7hmXePtlQHA
				dD8EYIzz/TOglmjWGlqoKpN9NMkq8ZKnOMjPPxrNoD31guE8lNQVM8MD1EsUbOsKfikIGQo/
				ifGs+jQVyvndWvnro6ZbFdq6uXLSUjQPCsBzgBgVOCTwOCfOT8ybp/ovqS/OKu/JQ2uneRZT
				Txw/tGxkruOcj8Rzz8e+dOfRoE1fezVXcpkWj6jegpowXXdB9Ud+0LgrKSNoHtn+mt2j7e9V
				UcYh/wASUVREg2oy0S07EfJCgj+Q402NGgW/b7ovqGwdX3a6XS8RTUNZDHEtJGxcFkzh+VXa
				eW4Gc5/gNMjRo0H/2Q=="
			/>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template name="directeur_signe">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<br/>
			<img
				src="data:image/jpeg;base64,
				iVBORw0KGgoAAAANSUhEUgAAAK8AAACvAQMAAACxXBw2AAAAB3RJTUUH2woPDAQmGYX3JgAAAAlw
				SFlzAAAK8AAACvABQqw0mAAAAAZQTFRFAAAA////pdmf3QAAAShJREFUeNrtl0EOhCAMRcvKJTeC
				mw16M7xRl6xgfkGNmllOITPRpEGfCwv/tyCVT1emB/8TToTLEdloC8t90Me+RiaMHGqoY0cmeXZ2
				BXqRGY1LxJqsnTGE6IarDJi8KH9Xpy+uHkRyEndr6uCttjyTaH8tQCWcTBKzYfp4dZq8Ihbtp1JW
				PDg7Q/8yDGM9kiRHCDhwT1ATxylPWb6PWPhQXhPXWmMDARxdZeiN4yTJwfZkMOZdBk0smTS9nc10
				WRMtDJuJ2WB8U2a78ECcWo810mTsvK+JJm6NRfraVQY9XJupr1OXnSSc+7cWboeFuGVyNNMBWLZR
				uG/bR177BqOPAWF6w92wr+Xt4e95IBYZcFRAclL7XXA7LADDg4ED6+Ov/CA8+NfwG147q3gE6HAP
				AAAAAElFTkSuQmCC
				"
			/>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block line-height="0.1cm">&#160;</fo:block>
			<fo:external-graphic content-height="scale-to-fit" content-width="50%"
				scaling="non-uniform"
				src="data:image/jpeg;base64,
				iVBORw0KGgoAAAANSUhEUgAAAK8AAACvAQMAAACxXBw2AAAAB3RJTUUH2woPDAQmGYX3JgAAAAlw
				SFlzAAAK8AAACvABQqw0mAAAAAZQTFRFAAAA////pdmf3QAAAShJREFUeNrtl0EOhCAMRcvKJTeC
				mw16M7xRl6xgfkGNmllOITPRpEGfCwv/tyCVT1emB/8TToTLEdloC8t90Me+RiaMHGqoY0cmeXZ2
				BXqRGY1LxJqsnTGE6IarDJi8KH9Xpy+uHkRyEndr6uCttjyTaH8tQCWcTBKzYfp4dZq8Ihbtp1JW
				PDg7Q/8yDGM9kiRHCDhwT1ATxylPWb6PWPhQXhPXWmMDARxdZeiN4yTJwfZkMOZdBk0smTS9nc10
				WRMtDJuJ2WB8U2a78ECcWo810mTsvK+JJm6NRfraVQY9XJupr1OXnSSc+7cWboeFuGVyNNMBWLZR
				uG/bR177BqOPAWF6w92wr+Xt4e95IBYZcFRAclL7XXA7LADDg4ED6+Ov/CA8+NfwG147q3gE6HAP
				AAAAAElFTkSuQmCC"
			/>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:component/c:structuredBody">
		<xsl:for-each select="c:component/c:section">
			<xsl:comment>Debut body structure</xsl:comment>
			<xsl:call-template name="section"/>
			<xsl:comment>Fin body structure</xsl:comment>
		</xsl:for-each>
	</xsl:template>


	<xd:doc>
		<xd:desc> top level component/section: display title and text, and process any nested
			component/sections </xd:desc>
	</xd:doc>
	<xsl:template name="section">
		<xsl:call-template name="section-title">
			<xsl:with-param name="title" select="c:title"/>
		</xsl:call-template>
		<xsl:call-template name="section-text"/>
		<xsl:for-each select="c:component/c:section">
			<xsl:call-template name="nestedSection">
				<xsl:with-param name="margin" select="2"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:template>

	<xd:doc>
		<xd:desc> top level section title </xd:desc>
		<xd:param name="title"/>
	</xd:doc>
	<xsl:template name="section-title">
		<xsl:param name="title"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<h3>
				<xsl:value-of select="$title"/>
			</h3>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:if test="not(c:templateId[@root = '1.2.250.1.213.1.1.2.243'])">
				<fo:block font-size="9" font-weight="bold">
					<xsl:value-of select="$title"/>
				</fo:block>
				<fo:block line-height="0.5cm">&#160;</fo:block>
			</xsl:if>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc> top-level section Text </xd:desc>
	</xd:doc>
	<xsl:template name="section-text">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<div>
				<xsl:apply-templates select="c:text"/>
			</div>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block>
				<xsl:apply-templates select="c:text"/>
			</fo:block>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> nested component/section </xd:desc>
		<xd:param name="margin"/>
	</xd:doc>
	<xsl:template name="nestedSection">
		<xsl:param name="margin"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<h4 style="margin-left : {$margin}em;">
				<xsl:value-of select="c:title"/>
			</h4>
			<div style="margin-left : {$margin}em;">
				<xsl:apply-templates select="c:text"/>
			</div>
			<xsl:for-each select="c:component/c:section">
				<xsl:call-template name="nestedSection">
					<xsl:with-param name="margin" select="2 * $margin"/>
				</xsl:call-template>
			</xsl:for-each>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block margin-left="{$margin}em" font-weight="bold" font-size="8">
				<xsl:value-of select="c:title"/>
			</fo:block>
			<fo:block line-height="0.3cm">&#160;</fo:block>
			<fo:block margin-left="{$margin}em" font-size="8">
				<xsl:apply-templates select="c:text"/>
			</fo:block>
			<xsl:for-each select="c:component/c:section">
				<xsl:call-template name="nestedSection">
					<xsl:with-param name="margin" select="2 * $margin"/>
				</xsl:call-template>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc>
			<xd:p>Handle paragraph or fo:block</xd:p>
		</xd:desc>
	</xd:doc>
	<xsl:template match="c:paragraph">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<p>
				<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
			</p>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
			<fo:block line-height="0.1cm">&#160;</fo:block>
		</xsl:if>
	</xsl:template>



	<xd:doc>
		<xd:desc> pre format </xd:desc>
	</xd:doc>
	<xsl:template match="c:pre">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<pre>
	  <xsl:apply-templates/>
	</pre>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block>
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> Content w/ deleted text is hidden </xd:desc>
	</xd:doc>
	<xsl:template match="c:content[@revised = 'delete']"/>


	<xd:doc>
		<xd:desc> content </xd:desc>
	</xd:doc>
	<xsl:template match="c:content">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<span>
				<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
			</span>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:inline>
				<xsl:apply-templates/>
			</fo:inline>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> line break </xd:desc>
	</xd:doc>
	<xsl:template match="c:br">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:element name="br">
				<xsl:apply-templates/>
			</xsl:element>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block line-height="0.2cm">&#160; <xsl:apply-templates/>
			</fo:block>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> list </xd:desc>
	</xd:doc>
	<xsl:template match="c:list">
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:if test="c:caption">
				<fo:list-block>
					<fo:list-item>
						<fo:list-item-label>
							<fo:block margin-left="0.3cm" font-weight="bold">*</fo:block>
						</fo:list-item-label>
						<fo:list-item-body>
							<fo:block xsl:use-attribute-sets="myBlock7">
								<xsl:apply-templates select="c:caption"/>
							</fo:block>
						</fo:list-item-body>
					</fo:list-item>
				</fo:list-block>
			</xsl:if>
			<fo:list-block>
				<fo:list-item>
					<fo:list-item-label>
						<fo:block margin-left="0.3cm" font-weight="bold">*</fo:block>
					</fo:list-item-label>
					<fo:list-item-body>
						<xsl:for-each select="c:item">
							<fo:block xsl:use-attribute-sets="myBlock6">
								<xsl:apply-templates/>
							</fo:block>
						</xsl:for-each>
					</fo:list-item-body>
				</fo:list-item>
			</fo:list-block>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<!-- caption -->
			<xsl:if test="c:caption">
				<div style="font-weight:bold; ">
					<xsl:apply-templates select="c:caption"/>
				</div>
			</xsl:if>
			<!-- item -->
			<xsl:choose>
				<xsl:when test="@listType = 'ordered'">
					<ol>
						<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
						<xsl:for-each select="c:item">
							<li>
								<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
								<!--<xsl:if test="@ID">
                                <a name="{@ID}"/>
                            </xsl:if>-->
								<xsl:apply-templates/>
							</li>
						</xsl:for-each>
					</ol>
				</xsl:when>
				<xsl:otherwise>
					<!-- list is unordered -->
					<ul>
						<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
						<xsl:for-each select="c:item">
							<li>
								<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
								<xsl:apply-templates/>
							</li>
						</xsl:for-each>
					</ul>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> caption </xd:desc>
	</xd:doc>
	<xsl:template match="c:caption">
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:choose>
				<xsl:when test="parent::c:table">
					<caption>
						<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
						<xsl:apply-templates/>
					</caption>
				</xsl:when>
				<xsl:otherwise>
					<div class="caption">
						<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
						<xsl:apply-templates/>
					</div>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:choose>
				<xsl:when test="parent::c:table">
					<caption>
						<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
						<xsl:apply-templates/>
					</caption>
				</xsl:when>
				<xsl:otherwise>
					<fo:block>
						<xsl:apply-templates select="." mode="handleSectionTextAttributes"/>
						<xsl:apply-templates/>
					</fo:block>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> Tables </xd:desc>
	</xd:doc>
	<xsl:template
		match="c:table/@* | c:thead/@* | c:tfoot/@* | c:tbody/@* | c:colgroup/@* | c:col/@* | c:tr/@* | c:th/@* | c:td/@*">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:copy>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</xsl:copy>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:copy>
				<xsl:apply-templates/>
			</xsl:copy>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:table">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:table width="95%" margin="0.3em 0" xsl:use-attribute-sets="myBorder"
				table-layout="auto">
				<xsl:apply-templates/>
			</fo:table>
			<fo:block line-height="0.2cm">&#160;</fo:block>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<table>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</table>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:thead">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:table-header>
				<xsl:apply-templates/>
			</fo:table-header>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<thead>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</thead>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:tfoot">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:apply-templates/>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<tfoot>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</tfoot>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:tbody">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:table-body line-stacking-strategy="max-height">
				<xsl:apply-templates/>
			</fo:table-body>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<tbody>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</tbody>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:colgroup">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:apply-templates/>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<colgroup>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</colgroup>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:col">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:apply-templates/>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<col>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</col>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:tr">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:table-row border="solid 0.1mm white">
				<xsl:apply-templates/>
			</fo:table-row>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<tr>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</tr>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:th">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:choose>
				<xsl:when test="@colspan">
					<xsl:variable name="nb_header" select="@colspan"/>
					<fo:table-cell xsl:use-attribute-sets="myBlock13"
						number-columns-spanned="{$nb_header}">
						<fo:block>
							<xsl:apply-templates/>
						</fo:block>
					</fo:table-cell>
				</xsl:when>
				<xsl:when test="@rowspan">
					<xsl:variable name="nb_header" select="@rowspan"/>
					<fo:table-cell xsl:use-attribute-sets="myBlock13"
						number-rows-spanned="{$nb_header}">
						<fo:block>
							<xsl:apply-templates/>
						</fo:block>
					</fo:table-cell>
				</xsl:when>
				<xsl:otherwise>
					<fo:table-cell xsl:use-attribute-sets="myBlock13">
						<fo:block>
							<xsl:apply-templates/>
						</fo:block>
					</fo:table-cell>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<th>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</th>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:td">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:choose>
				<xsl:when test="@colspan">
					<xsl:variable name="nb_header" select="@colspan"/>
					<fo:table-cell xsl:use-attribute-sets="myBlock14"
						number-columns-spanned="{$nb_header}">
						<fo:block>
							<xsl:apply-templates/>
						</fo:block>
					</fo:table-cell>
				</xsl:when>
				<xsl:when test="@rowspan">
					<xsl:variable name="nb_header" select="@rowspan"/>
					<fo:table-cell xsl:use-attribute-sets="myBlock14"
						number-rows-spanned="{$nb_header}">
						<fo:block>
							<xsl:apply-templates/>
						</fo:block>
					</fo:table-cell>
				</xsl:when>
				<xsl:otherwise>
					<fo:table-cell xsl:use-attribute-sets="myBlock14">
						<fo:block>
							<xsl:apply-templates/>
						</fo:block>
					</fo:table-cell>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<td>
				<xsl:copy-of select="@*"/>
				<xsl:apply-templates/>
			</td>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
	</xd:doc>
	<xsl:template match="c:table/c:caption">
		<!-- Extension FR : PDF -->
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block font-weight="bold">
				<xsl:apply-templates/>
			</fo:block>
		</xsl:if>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<span style="font-weight:bold; ">
				<xsl:apply-templates/>
			</span>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> RenderMultiMedia this currently only handles GIF's and JPEG's. It could, however,
			be extended by including other image MIME types in the predicate and/or by generating
			&lt;object&gt; or &lt;applet&gt; tag with the correct params depending on the media type
			@ID =$imageRef referencedObject </xd:desc>
	</xd:doc>
	<xsl:template match="c:renderMultiMedia">
		<xsl:variable name="imageRefs" select="@referencedObject"/>
		<xsl:variable name="referencedObjects"
			select="ancestor::c:ClinicalDocument//c:regionOfInterest[@ID = $imageRefs] | ancestor::c:ClinicalDocument//c:observationMedia[@ID = $imageRefs]"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<div>
				<xsl:apply-templates select="c:caption"/>
				<xsl:for-each select="$referencedObjects">
					<xsl:choose>
						<xsl:when test="self::c:regionOfInterest">
							<!-- What we actually would want is an svg with fallback to just the image that renders the ROI on top of image
                            The only example (in the CDA standard itself) that we've seen so far has unusable coordinates. That for now
                            is not very encouraging to put in the effort, so we just render the images for now
                        -->
							<xsl:apply-templates select=".//c:observationMedia"
							> </xsl:apply-templates>
						</xsl:when>
						<!-- Here is where the direct MultiMedia image referencing goes -->
						<xsl:when test="self::c:observationMedia">
							<xsl:apply-templates select="."/>
						</xsl:when>
					</xsl:choose>
				</xsl:for-each>
			</div>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<fo:block>
				<xsl:apply-templates select="c:caption"/>
				<xsl:for-each select="$referencedObjects">
					<xsl:choose>
						<xsl:when test="self::c:regionOfInterest">
							<!-- What we actually would want is an svg with fallback to just the image that renders the ROI on top of image
                            The only example (in the CDA standard itself) that we've seen so far has unusable coordinates. That for now
                            is not very encouraging to put in the effort, so we just render the images for now
                        -->
							<xsl:apply-templates select=".//c:observationMedia"
							> </xsl:apply-templates>
						</xsl:when>
						<!-- Here is where the direct MultiMedia image referencing goes -->
						<xsl:when test="self::c:observationMedia">
							<xsl:apply-templates select="."/>
						</xsl:when>
					</xsl:choose>
				</xsl:for-each>
			</fo:block>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="in"/>
	</xd:doc>
	<xsl:template name="show-address">
		<xsl:param name="in"/>
		<xsl:if test="$in">
			<xsl:if test="$in/@use">
				<xsl:if test="not(contains($vendor, 'Saxonica'))">
					<span style="color: black;">
						<xsl:call-template name="tokenize">
							<xsl:with-param name="prefix" select="'addressUse_'"/>
							<xsl:with-param name="string" select="$in/@use"/>
							<xsl:with-param name="delimiters" select="' '"/>
						</xsl:call-template>
						<xsl:text>: </xsl:text>
					</span>
				</xsl:if>
				<xsl:if test="(contains($vendor, 'Saxonica'))">
					<fo:inline color="black">
						<xsl:call-template name="tokenize">
							<xsl:with-param name="prefix" select="'addressUse_'"/>
							<xsl:with-param name="string" select="$in/@use"/>
							<xsl:with-param name="delimiters" select="' '"/>
						</xsl:call-template>
						<xsl:text>: </xsl:text>
					</fo:inline>
				</xsl:if>
			</xsl:if>
			<xsl:if test="$in[@use][@nullFlavor]">
				<xsl:text> </xsl:text>
			</xsl:if>
			<xsl:call-template name="show-nullFlavor">
				<xsl:with-param name="in" select="$in/@nullFlavor"/>
			</xsl:call-template>
			<xsl:for-each select="$in/text() | $in/*">
				<xsl:choose>
					<xsl:when test="self::c:useablePeriod"/>
					<!-- DTr1 only if not streetAddressLine -->
					<xsl:when test="self::c:streetName">
						<xsl:if test="not(../c:streetAddressLine)">
							<xsl:variable name="additionalLocator"
								select="
									following-sibling::c:*[1][local-name() = 'additionalLocator'] |
									following-sibling::c:*[1][local-name() = 'houseNumberNumeric' or local-name() = 'houseNumber' or local-name() = 'buildingNumberSuffix']/following-sibling::c:*[1][local-name() = 'additionalLocator'] |
									following-sibling::c:*[1][local-name() = 'houseNumberNumeric' or local-name() = 'houseNumber']/following-sibling::c:*[1][local-name() = 'buildingNumberSuffix']/following-sibling::c:*[1][local-name() = 'additionalLocator']"/>
							<xsl:variable name="houseNumber"
								select="
									following-sibling::c:*[1][local-name() = 'houseNumberNumeric'] |
									following-sibling::c:*[1][local-name() = 'houseNumber']"/>
							<xsl:variable name="buildingNumberSuffix"
								select="
									following-sibling::c:*[1][local-name() = 'buildingNumberSuffix'] |
									following-sibling::c:*[1][local-name() = 'houseNumberNumeric' or local-name() = 'houseNumber']/following-sibling::c:*[1][local-name() = 'buildingNumberSuffix']"/>
							<xsl:value-of select="."/>
							<xsl:choose>
								<xsl:when test="string-length($houseNumber) > 0">
									<xsl:text>&#160;</xsl:text>
									<xsl:value-of select="$houseNumber"/>
									<xsl:if test="string-length($buildingNumberSuffix) > 0">
										<xsl:text>&#160;</xsl:text>
										<xsl:value-of select="$buildingNumberSuffix"/>
									</xsl:if>
								</xsl:when>
								<xsl:when test="string-length($buildingNumberSuffix) > 0">
									<xsl:text>&#160;</xsl:text>
									<xsl:value-of select="$buildingNumberSuffix"/>
								</xsl:when>
							</xsl:choose>
							<xsl:if test="string-length($additionalLocator) > 0">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of select="$additionalLocator"/>
								<xsl:variable name="houseNumber2"
									select="
										$additionalLocator/following-sibling::c:*[1][local-name() = 'houseNumberNumeric'] |
										$additionalLocator/following-sibling::c:*[1][local-name() = 'houseNumber']"/>
								<xsl:variable name="buildingNumberSuffix2"
									select="
										$additionalLocator/following-sibling::c:*[1][local-name() = 'buildingNumberSuffix'] |
										$additionalLocator/following-sibling::c:*[1][local-name() = 'houseNumberNumeric' or local-name() = 'houseNumber']/following-sibling::c:*[1][local-name() = 'buildingNumberSuffix']"/>
								<xsl:choose>
									<xsl:when test="string-length($houseNumber2) > 0">
										<xsl:text>&#160;</xsl:text>
										<xsl:value-of select="$houseNumber2"/>
										<xsl:if test="string-length($buildingNumberSuffix2) > 0">
											<xsl:text>&#160;</xsl:text>
											<xsl:value-of select="$buildingNumberSuffix2"/>
										</xsl:if>
									</xsl:when>
									<xsl:when test="string-length($buildingNumberSuffix2) > 0">
										<xsl:text>&#160;</xsl:text>
										<xsl:value-of select="$buildingNumberSuffix2"/>
									</xsl:when>
								</xsl:choose>
							</xsl:if>
							<xsl:if
								test="following-sibling::*[not(local-name() = 'houseNumber' or local-name() = 'houseNumberNumeric' or local-name() = 'buildingNumberSuffix' or local-name() = 'additionalLocator')][string-length(.) > 0 or @code]">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 only if not streetAddressLine -->
					<xsl:when test="self::c:part[@type = 'STR']">
						<xsl:if test="not(../c:part[@type = 'SAL'])">
							<xsl:variable name="additionalLocator"
								select="
									following-sibling::c:part[1][@type = 'ADL'] |
									following-sibling::c:part[1][@type = 'BNN' or @type = 'BNR' or @type = 'BNS']/following-sibling::c:part[1][@type = 'ADL'] |
									following-sibling::c:part[1][@type = 'BNN' or @type = 'BNR' or @type = 'BNS']/following-sibling::c:part[1][@type = 'BNS']/following-sibling::c:part[1][@type = 'ADL']"/>
							<xsl:variable name="houseNumber"
								select="
									following-sibling::c:part[1][@type = 'BNN'] |
									following-sibling::c:part[1][@type = 'BNR']"/>
							<xsl:variable name="buildingNumberSuffix"
								select="
									following-sibling::c:part[1][@type = 'BNS'] |
									following-sibling::c:part[1][@type = 'BNN' or @type = 'BNR']/following-sibling::c:part[1][@type = 'BNS']"/>
							<xsl:value-of select="."/>
							<xsl:choose>
								<xsl:when test="string-length($houseNumber) > 0">
									<xsl:text>&#160;</xsl:text>
									<xsl:value-of select="$houseNumber"/>
									<xsl:if test="string-length($buildingNumberSuffix) > 0">
										<xsl:text>&#160;</xsl:text>
										<xsl:value-of select="$buildingNumberSuffix"/>
									</xsl:if>
								</xsl:when>
								<xsl:when test="string-length($buildingNumberSuffix) > 0">
									<xsl:text>&#160;</xsl:text>
									<xsl:value-of select="$buildingNumberSuffix"/>
								</xsl:when>
							</xsl:choose>
							<xsl:if test="string-length($additionalLocator) > 0">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of select="$additionalLocator"/>

								<xsl:variable name="houseNumber2"
									select="
										$additionalLocator/following-sibling::c:part[1][@type = 'BNN'] |
										$additionalLocator/following-sibling::c:part[1][@type = 'BNR']"/>
								<xsl:variable name="buildingNumberSuffix2"
									select="
										$additionalLocator/following-sibling::c:part[1][@type = 'BNS'] |
										$additionalLocator/following-sibling::c:part[1][@type = 'BNN' or @type = 'BNR']/following-sibling::c:part[1][@type = 'BNS']"/>

								<xsl:choose>
									<xsl:when test="string-length($houseNumber2) > 0">
										<xsl:text>&#160;</xsl:text>
										<xsl:value-of select="$houseNumber2"/>
										<xsl:if test="string-length($buildingNumberSuffix2) > 0">
											<xsl:text>&#160;</xsl:text>
											<xsl:value-of select="$buildingNumberSuffix2"/>
										</xsl:if>
									</xsl:when>
									<xsl:when test="string-length($buildingNumberSuffix2) > 0">
										<xsl:text>&#160;</xsl:text>
										<xsl:value-of select="$buildingNumberSuffix2"/>
									</xsl:when>
								</xsl:choose>
							</xsl:if>
							<xsl:if
								test="following-sibling::*[not(@type = 'BNR' or local-name() = 'houseNumberNumeric' or @type = 'BNS' or @type = 'ADL')][string-length(.) > 0 or @code]">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr1 only if not streetAddressLine -->
					<xsl:when
						test="self::c:houseNumber or self::c:houseNumberNumeric or self::c:buildingNumberSuffix">
						<xsl:if test="not(../c:streetAddressLine)">
							<xsl:if
								test="not(preceding-sibling::c:*[1][local-name() = 'streetName' or local-name() = 'additionalLocator'])">
								<xsl:if
									test="not(self::c:buildingNumberSuffix and preceding-sibling::c:*[1][local-name() = 'houseNumberNumeric' or local-name() = 'houseNumber'])">
									<xsl:value-of select="."/>
									<xsl:if
										test="following-sibling::c:*[1][string-length(.) > 0 or @code]">
										<xsl:text> </xsl:text>
									</xsl:if>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 only if not streetAddressLine -->
					<xsl:when test="self::c:part[@type = 'BNN' or @type = 'BNR' or @type = 'BNS']">
						<xsl:if test="not(../c:part[@type = 'SAL'])">
							<xsl:if
								test="not(preceding-sibling::c:*[1][c:part[@type = 'STR' or @type = 'ADL']])">
								<xsl:if
									test="not(self::c:part[@type = 'BNS'] and preceding-sibling::c:*[1][@type = 'BNN' or @type = 'BNR'])">
									<xsl:value-of select="@value"/>
									<xsl:if
										test="following-sibling::c:part[1][string-length(@value) > 0 or @code]">
										<xsl:text> </xsl:text>
									</xsl:if>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr1 -->
					<xsl:when test="self::c:additionalLocator">
						<xsl:if
							test="not(preceding-sibling::c:*[1][local-name() = 'houseNumber' or local-name() = 'houseNumberNumeric' or local-name() = 'buildingNumberSuffix'])">
							<xsl:value-of select="."/>
							<xsl:if
								test="following-sibling::c:*[1][local-name() = 'houseNumberNumeric']">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of
									select="following-sibling::c:*[1][local-name() = 'houseNumberNumeric']"
								/>
							</xsl:if>
							<xsl:if test="following-sibling::c:*[1][local-name() = 'houseNumber']">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of
									select="following-sibling::c:*[1][local-name() = 'houseNumber']"
								/>
							</xsl:if>
							<xsl:if
								test="following-sibling::c:*[1][local-name() = 'buildingNumberSuffix']">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of
									select="following-sibling::c:*[1][local-name() = 'buildingNumberSuffix']"
								/>
							</xsl:if>
							<xsl:if test="following-sibling::c:*[1][string-length(.) > 0 or @code]">
								<xsl:text> </xsl:text>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 -->
					<xsl:when test="self::c:part[@type = 'ADL']">
						<xsl:if
							test="not(preceding-sibling::c:*[1][@type = 'BNN' or @type = 'BNR' or @type = 'BNS'])">
							<xsl:value-of select="@value"/>
							<xsl:if test="following-sibling::c:*[1][@type = 'BNN']">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of
									select="following-sibling::c:*[1][@type = 'BNN']/@value"/>
							</xsl:if>
							<xsl:if test="following-sibling::c:*[1][@type = 'BNR']">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of
									select="following-sibling::c:*[1][@type = 'BNR']/@value"/>
							</xsl:if>
							<xsl:if test="following-sibling::c:*[1][@type = 'BNS']">
								<xsl:text>&#160;</xsl:text>
								<xsl:value-of
									select="following-sibling::c:*[1][@type = 'BNS']/@value"/>
							</xsl:if>
							<xsl:if
								test="following-sibling::c:part[1][string-length(@value) > 0 or @code]">
								<xsl:text> </xsl:text>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr1 -->
					<xsl:when test="self::c:postBox">
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key" select="'Postbox'"/>
							<xsl:with-param name="post" select="' '"/>
						</xsl:call-template>
						<xsl:value-of select="."/>
						<xsl:if test="following-sibling::c:*[1][string-length(.) > 0 or @code]">
							<xsl:text> </xsl:text>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 -->
					<xsl:when test="self::c:part[@type = 'POB']">
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key" select="'Postbox'"/>
							<xsl:with-param name="post" select="' '"/>
						</xsl:call-template>
						<xsl:value-of select="@value"/>
						<xsl:if
							test="following-sibling::c:part[1][string-length(@value) > 0 or @code]">
							<xsl:text> </xsl:text>
						</xsl:if>
					</xsl:when>
					<!-- DTr1 ZIP CITY, STATE or CITY, STATE ZIP depending on addr part contents -->
					<xsl:when test="self::c:city">
						<xsl:if
							test="preceding-sibling::c:postalCode[1][string-length(.) > 0 or @code]">
							<xsl:choose>
								<xsl:when
									test="preceding-sibling::c:postalCode[1][string-length(.) > 0]">
									<xsl:value-of
										select="preceding-sibling::c:postalCode[1][string-length(.) > 0]"
									/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="preceding-sibling::c:postalCode[1][@code]/@code"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:value-of select="."/>
						<xsl:if test="../c:state[string-length(.) > 0]">
							<xsl:text>, </xsl:text>
							<xsl:value-of select="../c:state"/>
						</xsl:if>
						<xsl:if
							test="following-sibling::c:postalCode[1][string-length(.) > 0 or @code]">
							<xsl:text> </xsl:text>
							<xsl:choose>
								<xsl:when
									test="following-sibling::c:postalCode[1][string-length(.) > 0]">
									<xsl:value-of
										select="following-sibling::c:postalCode[1][string-length(.) > 0]"
									/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="following-sibling::c:postalCode[1][@code]/@code"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
						<xsl:if test="following-sibling::c:*[1][string-length(.) > 0 or @code]">
							<xsl:text> </xsl:text>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 ZIP CITY, STATE or CITY, STATE ZIP depending on addr part contents -->
					<xsl:when test="self::c:part[@type = 'CTY']">
						<xsl:if
							test="preceding-sibling::c:part[@type = 'ZIP'][1][string-length(@value) > 0 or @code]">
							<xsl:choose>
								<xsl:when
									test="preceding-sibling::c:postalCode[1][string-length(@value) > 0]">
									<xsl:value-of
										select="preceding-sibling::c:postalCode[1][string-length(@value) > 0]/@value"
									/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="preceding-sibling::c:postalCode[1][@code]/@code"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:value-of select="@value"/>
						<xsl:if test="../c:part[@type = 'STA'][string-length(@value) > 0]">
							<xsl:text>, </xsl:text>
							<xsl:value-of select="../c:part[@type = 'STA']/@value"/>
						</xsl:if>
						<xsl:if
							test="following-sibling::c:part[@type = 'ZIP'][1][string-length(@value) > 0 or @code]">
							<xsl:choose>
								<xsl:when
									test="following-sibling::c:postalCode[1][string-length(@value) > 0]">
									<xsl:value-of
										select="following-sibling::c:postalCode[1][string-length(@value) > 0]/@value"
									/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="following-sibling::c:postalCode[1][@code]/@code"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:if
							test="following-sibling::c:part[1][string-length(@value) > 0 or @code]">
							<xsl:if test="not(contains($vendor, 'Saxonica'))">
								<br/>
							</xsl:if>
							<xsl:if test="(contains($vendor, 'Saxonica'))">
								<xsl:text> </xsl:text>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr1 -->
					<xsl:when test="self::c:postalCode and ../c:city"/>
					<!-- DTr2 -->
					<xsl:when test="self::c:part[@type = 'ZIP'] and ../c:part[@type = 'CTY']"/>
					<!-- DTr1 -->
					<xsl:when test="self::c:state">
						<xsl:if test="not(../c:city)">
							<xsl:if
								test="(string-length(preceding-sibling::c:*[1]) > 0 or preceding-sibling::*/@code)">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
							<xsl:value-of select="."/>
							<xsl:if
								test="(string-length(following-sibling::c:*[1]) > 0 or following-sibling::*/@code)">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 -->
					<xsl:when test="self::c:part[@type = 'STA']">
						<xsl:if test="not(../c:part[@type = 'CTY'])">
							<xsl:if
								test="(string-length(preceding-sibling::c:*[1]/@value) > 0 or preceding-sibling::c:*/@code)">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
							<xsl:value-of select="@value"/>
							<xsl:if
								test="(string-length(following-sibling::c:*[1]/@value) > 0 or following-sibling::c:*/@code)">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr1 -->
					<xsl:when test="string-length(text()) > 0">
						<xsl:value-of select="."/>
						<xsl:if
							test="(string-length(following-sibling::c:*[1]) > 0 or following-sibling::c:*/@code)">
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:if test="string(number(following-sibling::c:*[1])) != 'NaN'">
							<xsl:if
								test="number(following-sibling::c:*[1]) = following-sibling::c:*[1]">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<!-- DTr2 -->
					<xsl:when test="string-length(@value) > 0">
						<xsl:value-of select="@value"/>
						<xsl:if
							test="(string-length(following-sibling::c:*[1]/@value) > 0 or following-sibling::c:*/@code)">
							<xsl:text> </xsl:text>
						</xsl:if>
						<xsl:if test="string(number(following-sibling::c:*[1]/@value)) != 'NaN'">
							<xsl:if
								test="number(following-sibling::c:*[1]/@value) = following-sibling::c:*[1]/@value">
								<xsl:if test="not(contains($vendor, 'Saxonica'))">
									<br/>
								</xsl:if>
								<xsl:if test="(contains($vendor, 'Saxonica'))">
									<xsl:text> </xsl:text>
								</xsl:if>
							</xsl:if>
						</xsl:if>
					</xsl:when>
					<xsl:otherwise> </xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
			<xsl:for-each select="$in/c:useablePeriod">
				<xsl:if test="not(contains($vendor, 'Saxonica'))">
					<div>
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key" select="'Period'"/>
						</xsl:call-template>
						<xsl:text> </xsl:text>
						<xsl:call-template name="show-ivlts">
							<xsl:with-param name="in" select="."/>
						</xsl:call-template>
					</div>
				</xsl:if>
				<xsl:if test="(contains($vendor, 'Saxonica'))">
					<fo:block>
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key" select="'Period'"/>
						</xsl:call-template>
						<xsl:text> </xsl:text>
						<xsl:call-template name="show-ivlts">
							<xsl:with-param name="in" select="."/>
						</xsl:call-template>
					</fo:block>
				</xsl:if>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="telecom"/>
	</xd:doc>
	<xsl:template name="show-telecom">
		<xsl:param name="telecom"/>
		<xsl:choose>
			<xsl:when test="$telecom">
				<xsl:variable name="type" select="substring-before($telecom/@value, ':')"/>
				<xsl:variable name="value" select="substring-after($telecom/@value, ':')"/>
				<xsl:if test="$type">
					<xsl:if test="not(@use) or ($type = 'mailto')">
						<xsl:call-template name="translateTelecomCode">
							<xsl:with-param name="code" select="$type"/>
						</xsl:call-template>
					</xsl:if>
					<xsl:if test="@use">
						<xsl:text> </xsl:text>
						<xsl:if test="($type != 'mailto')">
							<xsl:call-template name="translateTelecomCode">
								<xsl:with-param name="code" select="@use"/>
							</xsl:call-template>
						</xsl:if>
						<xsl:if test="($type = 'mailto')">
							<xsl:text>(</xsl:text>
							<xsl:call-template name="translateTelecomCode">
								<xsl:with-param name="code" select="@use"/>
							</xsl:call-template>
							<xsl:text>)</xsl:text>
						</xsl:if>
					</xsl:if>
					<xsl:text>: </xsl:text>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$value"/>
				</xsl:if>
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>Coordonnées téléphoniques non renseignées</xsl:text>
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<br/>
		</xsl:if>
		<xsl:if test="contains($vendor, 'Saxonica')">
			<fo:block line-height="0.1cm">&#160;</fo:block>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
		<xd:param name="code"/>
	</xd:doc>
	<xsl:template name="translateTelecomCode">
		<xsl:param name="code"/>
		<xsl:choose>
			<!-- lookup table Telecom URI -->
			<xsl:when test="$code = 'tel'">
				<xsl:text>Tel</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'fax'">
				<xsl:text>Fax</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'http'">
				<xsl:text>Page Web</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'mailto'">
				<xsl:text>Adresse de messagerie</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'H'">
				<xsl:text>Domicile</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'TMP'">
				<xsl:text>Adresse temporaire</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'HV'">
				<xsl:text>Domicile de vacances</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'HP'">
				<xsl:text>Domicile principal</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'WP'">
				<xsl:text>Travail</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'PUB'">
				<xsl:text>Numéro Public</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'DIR'">
				<xsl:text>Numéro direct</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'EC'">
				<xsl:text>Urgence</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'MC'">
				<xsl:text>Mobile</xsl:text>
			</xsl:when>
			<xsl:when test="$code = 'PG'">
				<xsl:text>Pager</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>{$code='</xsl:text>
				<xsl:value-of select="$code"/>
				<xsl:text>'?}</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>



	<xd:doc>
		<xd:desc> formatDateTime </xd:desc>
		<xd:param name="date"/>
	</xd:doc>
	<xsl:template name="formatDateTime">
		<xsl:param name="date"/>
		<!-- day -->
		<xsl:choose>
			<xsl:when test="substring($date, 7, 1) = &quot;0&quot;">
				<xsl:value-of select="substring($date, 8, 1)"/>
				<xsl:text> </xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="substring($date, 7, 2)"/>
				<xsl:text> </xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<!-- month -->
		<xsl:variable name="month" select="substring($date, 5, 2)"/>
		<xsl:choose>
			<xsl:when test="$month = '01'">
				<xsl:text>Janvier </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '02'">
				<xsl:text>Février </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '03'">
				<xsl:text>Mars </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '04'">
				<xsl:text>Avril </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '05'">
				<xsl:text>Mai </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '06'">
				<xsl:text>Juin </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '07'">
				<xsl:text>Juillet </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '08'">
				<xsl:text>Août </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '09'">
				<xsl:text>Septembre </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '10'">
				<xsl:text>Octobre </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '11'">
				<xsl:text>Novembre </xsl:text>
			</xsl:when>
			<xsl:when test="$month = '12'">
				<xsl:text>Décembre </xsl:text>
			</xsl:when>
		</xsl:choose>
		<!-- year -->
		<xsl:value-of select="substring($date, 1, 4)"/>
		<!-- time and US timezone -->
		<xsl:if test="string-length($date) > 8">
			<xsl:text>, </xsl:text>
			<!-- time -->
			<xsl:variable name="time">
				<xsl:value-of select="substring($date, 9, 6)"/>
			</xsl:variable>
			<xsl:variable name="hh">
				<xsl:value-of select="substring($time, 1, 2)"/>
			</xsl:variable>
			<xsl:variable name="mm">
				<xsl:value-of select="substring($time, 3, 2)"/>
			</xsl:variable>
			<xsl:variable name="ss">
				<xsl:value-of select="substring($time, 5, 2)"/>
			</xsl:variable>
			<xsl:if test="string-length($hh) &gt; 1">
				<xsl:value-of select="$hh"/>
				<xsl:if
					test="string-length($mm) &gt; 1 and not(contains($mm, '-')) and not(contains($mm, '+'))">
					<xsl:text>:</xsl:text>
					<xsl:value-of select="$mm"/>
					<xsl:if
						test="string-length($ss) &gt; 1 and not(contains($ss, '-')) and not(contains($ss, '+'))">
						<xsl:text>:</xsl:text>
						<xsl:value-of select="$ss"/>
					</xsl:if>
				</xsl:if>
			</xsl:if>
			<!-- time zone -->
			<xsl:variable name="tzon">
				<xsl:choose>
					<xsl:when test="contains($date, '+')">
						<xsl:text>+</xsl:text>
						<xsl:value-of select="substring-after($date, '+')"/>
					</xsl:when>
					<xsl:when test="contains($date, '-')">
						<xsl:text>-</xsl:text>
						<xsl:value-of select="substring-after($date, '-')"/>
					</xsl:when>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<!-- reference: http://www.timeanddate.com/library/abbreviations/timezones/na/ -->
				<xsl:when test="$tzon = '-0500'">
					<xsl:text>, EST</xsl:text>
				</xsl:when>
				<xsl:when test="$tzon = '-0600'">
					<xsl:text>, CST</xsl:text>
				</xsl:when>
				<xsl:when test="$tzon = '-0700'">
					<xsl:text>, MST</xsl:text>
				</xsl:when>
				<xsl:when test="$tzon = '-0800'">
					<xsl:text>, PST</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$tzon"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>



	<xd:doc>
		<xd:desc> show-name </xd:desc>
		<xd:param name="name"/>
	</xd:doc>
	<xsl:template name="show-name">
		<xsl:param name="name"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:choose>
				<xsl:when test="$name/c:family">
					<xsl:choose>
						<xsl:when test="$name/c:suffix">
							<xsl:for-each select="$name/c:suffix">
								<span style="font-weight:bold; ">
									<xsl:value-of select="."/>
								</span>
								<xsl:text> </xsl:text>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$name/c:prefix">
								<span style="font-weight:bold; ">
									<xsl:value-of select="."/>
								</span>
								<xsl:text> </xsl:text>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:for-each select="$name/c:given">
						<span style="font-weight:bold; ">
							<xsl:value-of select="."/>
							<xsl:text> </xsl:text>
						</span>
					</xsl:for-each>
					<xsl:for-each select="$name/c:family">
						<span style="font-weight:bold; ">
							<xsl:value-of select="."/>
						</span>
						<xsl:if test="@qualifier">
							<xsl:choose>
								<xsl:when test="@qualifier = &apos;BR&apos;">
									<xsl:text> (Nom de famille) </xsl:text>
								</xsl:when>
								<xsl:when test="@qualifier = &apos;SP&apos;">
									<xsl:text> (Nom d'usage) </xsl:text>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="@qualifier"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
						<xsl:text> </xsl:text>
					</xsl:for-each>
				</xsl:when>
				<xsl:otherwise>
					<span style="font-weight:bold; ">
						<xsl:value-of select="$name"/>
					</span>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:choose>
				<xsl:when test="$name/c:family">
					<xsl:choose>
						<xsl:when test="$name/c:suffix">
							<xsl:for-each select="$name/c:suffix">
								<fo:block font-weight="bold">
									<xsl:value-of select="."/>
								</fo:block>
								<xsl:text> </xsl:text>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<xsl:for-each select="$name/c:prefix">
								<fo:block font-weight="bold">
									<xsl:value-of select="."/>
								</fo:block>
								<xsl:text> </xsl:text>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:for-each select="$name/c:given">
						<fo:block font-weight="bold">
							<xsl:value-of select="."/>
							<xsl:text> </xsl:text>
						</fo:block>
					</xsl:for-each>
					<xsl:for-each select="$name/c:family">
						<fo:block font-weight="bold">
							<xsl:value-of select="."/>
						</fo:block>
						<xsl:if test="@qualifier">
							<xsl:choose>
								<xsl:when test="@qualifier = &apos;BR&apos;">
									<xsl:text> (Nom de famille) </xsl:text>
								</xsl:when>
								<xsl:when test="@qualifier = &apos;SP&apos;">
									<xsl:text> (Nom d'usage) </xsl:text>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="@qualifier"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
						<xsl:text> </xsl:text>
					</xsl:for-each>
				</xsl:when>
				<xsl:otherwise>
					<fo:block font-weight="bold">
						<xsl:value-of select="$name"/>
					</fo:block>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-gender </xd:desc>
	</xd:doc>
	<xsl:template name="show-gender">
		<xsl:choose>
			<xsl:when test="@code = &apos;M&apos;">
				<xsl:text>Masculin</xsl:text>
			</xsl:when>
			<xsl:when test="@code = &apos;F&apos;">
				<xsl:text>Féminin</xsl:text>
			</xsl:when>
			<xsl:when test="@code = &apos;U&apos;">
				<xsl:text>Inconnu</xsl:text>
			</xsl:when>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-address-city </xd:desc>
		<xd:param name="address"/>
	</xd:doc>
	<xsl:template name="show-address-city">
		<xsl:param name="address"/>
		<xsl:choose>
			<xsl:when test="$address">
				<xsl:if test="$address/@use">
					<xsl:text> </xsl:text>
					<xsl:call-template name="translateTelecomCode">
						<xsl:with-param name="code" select="$address/@use"/>
					</xsl:call-template>
					<xsl:text>:</xsl:text>
					<xsl:if test="not(contains($vendor, 'Saxonica'))">
						<br/>
					</xsl:if>
					<xsl:if test="(contains($vendor, 'Saxonica'))">
						<fo:block line-height="0.1cm">&#160;</fo:block>
					</xsl:if>
				</xsl:if>
				<xsl:if test="string-length($address/c:city) > 0">
					<xsl:text> </xsl:text>
					<xsl:value-of select="$address/c:city"/>
				</xsl:if>
			</xsl:when>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-address-county </xd:desc>
		<xd:param name="address"/>
	</xd:doc>
	<xsl:template name="show-address-county">
		<xsl:param name="address"/>
		<xsl:choose>
			<xsl:when test="$address">
				<xsl:if test="$address/@use">
					<xsl:text> </xsl:text>
					<xsl:call-template name="translateTelecomCode">
						<xsl:with-param name="code" select="$address/@use"/>
					</xsl:call-template>
					<xsl:text>:</xsl:text>
					<xsl:if test="not(contains($vendor, 'Saxonica'))">
						<br/>
					</xsl:if>
					<xsl:if test="(contains($vendor, 'Saxonica'))">
						<fo:block line-height="0.1cm">&#160;</fo:block>
					</xsl:if>
				</xsl:if>
				<xsl:if test="string-length($address/c:county) > 0">
					<xsl:text> </xsl:text>
					<xsl:value-of select="$address/c:county"/>
				</xsl:if>
			</xsl:when>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-identifiant </xd:desc>
		<xd:param name="id"/>
	</xd:doc>
	<xsl:template name="show-identifiant">
		<xsl:param name="id"/>
		<xsl:choose>
			<xsl:when test="not($id)">
				<xsl:if test="not(@nullFlavor)">
					<xsl:if test="@extension">
						<xsl:value-of select="@extension"/>
					</xsl:if>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="not($id/@nullFlavor)">
					<xsl:if test="$id/@extension">
						<xsl:value-of select="$id/@extension"/>
					</xsl:if>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-id </xd:desc>
		<xd:param name="id"/>
	</xd:doc>
	<xsl:template name="show-id">
		<xsl:param name="id"/>
		<xsl:choose>
			<xsl:when test="not($id)">
				<xsl:if test="not(@nullFlavor)">
					<xsl:if test="@extension">
						<xsl:value-of select="@extension"/>
					</xsl:if>
					<xsl:text> [</xsl:text>
					<xsl:value-of select="@root"/>
					<xsl:text>]</xsl:text>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="not($id/@nullFlavor)">
					<xsl:if test="$id/@extension">
						<xsl:value-of select="$id/@extension"/>
					</xsl:if>
					<xsl:text> [</xsl:text>
					<xsl:value-of select="$id/@root"/>
					<xsl:text>]</xsl:text>
				</xsl:if>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-guardian </xd:desc>
		<xd:param name="guardian"/>
	</xd:doc>
	<xsl:template name="show-guardian">
		<xsl:param name="guardian"/>
		<br/>
		<xsl:for-each select="$guardian/c:guardianPerson">
			<xsl:call-template name="show-name">
				<xsl:with-param name="name" select="."/>
			</xsl:call-template>
			<xsl:if test="not(contains($vendor, 'Saxonica'))">
				<br/>
			</xsl:if>
			<xsl:if test="(contains($vendor, 'Saxonica'))">
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:if>
			<xsl:for-each select="$guardian/c:addr">
				<xsl:call-template name="show-address-patient">
					<xsl:with-param name="address" select="."/>
				</xsl:call-template>
				<xsl:if test="not(contains($vendor, 'Saxonica'))">
					<br/>
				</xsl:if>
				<xsl:if test="(contains($vendor, 'Saxonica'))">
					<fo:block line-height="0.1cm">&#160;</fo:block>
				</xsl:if>
			</xsl:for-each>
			<xsl:if test="not(contains($vendor, 'Saxonica'))">
				<br/>
			</xsl:if>
			<xsl:if test="(contains($vendor, 'Saxonica'))">
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:if>
			<xsl:for-each select="$guardian/c:telecom">
				<xsl:call-template name="show-telecom">
					<xsl:with-param name="telecom" select="."/>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:if test="not(contains($vendor, 'Saxonica'))">
				<br/>
			</xsl:if>
			<xsl:if test="(contains($vendor, 'Saxonica'))">
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:if>
		</xsl:for-each>
		<xsl:for-each select="$guardian/c:guardianOrganization">
			<xsl:call-template name="show-name">
				<xsl:with-param name="name" select="."/>
			</xsl:call-template>
			<xsl:if test="not(contains($vendor, 'Saxonica'))">
				<br/>
			</xsl:if>
			<xsl:if test="(contains($vendor, 'Saxonica'))">
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:if>
			<xsl:for-each select="$guardian/c:addr">
				<xsl:call-template name="show-address-patient">
					<xsl:with-param name="address" select="."/>
				</xsl:call-template>
				<xsl:if test="not(contains($vendor, 'Saxonica'))">
					<br/>
				</xsl:if>
				<xsl:if test="(contains($vendor, 'Saxonica'))">
					<fo:block line-height="0.1cm">&#160;</fo:block>
				</xsl:if>
			</xsl:for-each>
			<xsl:if test="not(contains($vendor, 'Saxonica'))">
				<br/>
			</xsl:if>
			<xsl:if test="(contains($vendor, 'Saxonica'))">
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:if>
			<xsl:for-each select="$guardian/c:telecom">
				<xsl:call-template name="show-telecom">
					<xsl:with-param name="telecom" select="."/>
				</xsl:call-template>
				<xsl:if test="not(contains($vendor, 'Saxonica'))">
					<br/>
				</xsl:if>
				<xsl:if test="(contains($vendor, 'Saxonica'))">
					<fo:block line-height="0.1cm">&#160;</fo:block>
				</xsl:if>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-address-patient </xd:desc>
		<xd:param name="address"/>
	</xd:doc>
	<xsl:template name="show-address-patient">
		<xsl:param name="address"/>
		<xsl:choose>
			<xsl:when test="$address">
				<xsl:if test="$address/@use">
					<xsl:text> </xsl:text>
					<xsl:call-template name="translateTelecomCode">
						<xsl:with-param name="code" select="$address/@use"/>
					</xsl:call-template>
					<xsl:text>:</xsl:text>
					<xsl:if test="not(contains($vendor, 'Saxonica'))">
						<br/>
					</xsl:if>
					<xsl:if test="(contains($vendor, 'Saxonica'))">
						<fo:block line-height="0.1cm">&#160;</fo:block>
					</xsl:if>
				</xsl:if>
				<xsl:for-each select="$address/c:streetAddressLine">
					<xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:if test="$address/c:streetName">
					<xsl:value-of select="$address/c:houseNumber"/>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$address/c:streetNameType"/>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$address/c:streetName"/>
				</xsl:if>
				<xsl:if test="string-length($address/c:postalCode) > 0">
					<xsl:value-of select="$address/c:postalCode"/>
				</xsl:if>
				<xsl:if test="string-length($address/c:city) > 0">
					<xsl:text>,&#160;</xsl:text>
					<xsl:value-of select="$address/c:city"/>
				</xsl:if>
				<xsl:if test="string-length($address/c:state) > 0">
					<xsl:text>,&#160;</xsl:text>
					<xsl:value-of select="$address/c:state"/>
				</xsl:if>
				<xsl:if test="string-length($address/c:country) > 0">
					<xsl:text>,&#160;</xsl:text>
					<xsl:value-of select="$address/c:country"/>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>addresse non renseignée</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc> show-patient-name </xd:desc>
		<xd:param name="name"/>
	</xd:doc>
	<xsl:template name="show-patient-name">
		<xsl:param name="name"/>
		<xsl:if test="not(contains($vendor, 'Saxonica'))">
			<xsl:if test="$name/c:prefix">
				<tr>
					<td width="20%">
						<span class="td_label">
							<xsl:text>Civilité</xsl:text>
						</span>
					</td>
					<td colspan="3">
						<xsl:for-each select="$name/c:prefix">
							<xsl:value-of select="."/>
							<br/>
						</xsl:for-each>
					</td>
				</tr>
			</xsl:if>
			<xsl:for-each select="$name/c:family">
				<xsl:choose>
					<xsl:when test="@qualifier">
						<xsl:choose>
							<xsl:when test="@qualifier = &apos;BR&apos;">
								<tr>
									<td width="20%">
										<span class="td_label">
											<xsl:text>Nom de naissance</xsl:text>
										</span>
									</td>
									<td colspan="3">
										<span style="font-weight:bold; ">
											<xsl:value-of select="."/>
										</span>
									</td>
								</tr>
								<tr>
									<td width="20%">
										<span class="td_label">
											<xsl:text>Prénom(s)</xsl:text>
										</span>
									</td>
									<td colspan="3">
										<xsl:variable name="count" select="count($name/c:given)"/>
										<xsl:for-each select="$name/c:given">
											<xsl:choose>
												<xsl:when test="@qualifier = &apos;BR&apos;">
												<span style="font-weight:bold; ">
												<xsl:value-of select="."/>
												</span>
												</xsl:when>
												<xsl:otherwise>
												<xsl:value-of select="."/>
												</xsl:otherwise>
											</xsl:choose>
											<xsl:if test="$count > 1">
												<xsl:if
												test="(position() != last()) and (position() > 1)">
												<xsl:text>, </xsl:text>
												</xsl:if>
												<xsl:if test="position() = 1">
												<xsl:text> [</xsl:text>
												</xsl:if>
												<xsl:if test="position() = last()">
												<xsl:text>]</xsl:text>
												</xsl:if>
											</xsl:if>
										</xsl:for-each>
									</td>
								</tr>
							</xsl:when>
							<xsl:when test="@qualifier = &apos;SP&apos;">
								<tr>
									<td width="20%">
										<span class="td_label">
											<xsl:text>Nom d'usage</xsl:text>
										</span>
									</td>
									<td colspan="3">
										<xsl:value-of select="."/>
									</td>
								</tr>
							</xsl:when>
							<xsl:when test="@qualifier = &apos;CL&apos;">
								<tr>
									<td width="20%">
										<span class="td_label">
											<xsl:text>Nom et prénom utilisés</xsl:text>
										</span>
									</td>
									<td colspan="3">
										<span style="font-weight:bold; ">
											<xsl:value-of select="."/>
											<xsl:text>&#160;</xsl:text>
											<xsl:for-each select="$name/c:given">
												<xsl:if test="@qualifier = &apos;CL&apos;">
												<xsl:value-of select="."/>
												</xsl:if>
												<xsl:text>&#160;</xsl:text>
											</xsl:for-each>
										</span>
									</td>
								</tr>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<tr>
							<td width="20%">
								<span class="td_label">
									<xsl:text>Nom</xsl:text>
								</span>
							</td>
							<td colspan="3">
								<xsl:value-of select="."/>
							</td>
						</tr>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</xsl:if>
		<xsl:if test="(contains($vendor, 'Saxonica'))">
			<xsl:if test="$name/c:prefix">
				<xsl:text>Civilité</xsl:text>
				<xsl:for-each select="$name/c:prefix">
					<fo:block line-height="0.1cm">&#160;</fo:block>
				</xsl:for-each>
			</xsl:if>
			<xsl:for-each select="$name/c:family">
				<xsl:choose>
					<xsl:when test="@qualifier">
						<xsl:choose>
							<xsl:when test="@qualifier = &apos;BR&apos;">
								<xsl:text>Nom de naissance </xsl:text>
								<!--<xsl:value-of select="."/>-->
								<fo:block line-height="0.1cm">&#160;</fo:block>
								<xsl:text>Prénom(s) </xsl:text>
								<fo:block line-height="0.1cm">&#160;</fo:block>
							</xsl:when>
							<xsl:when test="@qualifier = &apos;SP&apos;">
								<xsl:text>Nom d'usage </xsl:text>
								<fo:block line-height="0.1cm">&#160;</fo:block>
							</xsl:when>
							<xsl:when test="@qualifier = &apos;CL&apos;">
								<xsl:text>Nom et prénom utilisés </xsl:text>
								<xsl:text>&#160;</xsl:text>
								<fo:block line-height="0.1cm">&#160;</fo:block>
							</xsl:when>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>
						<xsl:text>Nom </xsl:text>
						<fo:block line-height="0.1cm">&#160;</fo:block>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
		<xd:param name="name"/>
	</xd:doc>
	<xsl:template name="show-patient-name-field">
		<xsl:param name="name"/>
		<xsl:if test="$name/c:prefix">
			<xsl:for-each select="$name/c:prefix">
				<xsl:value-of select="."/>
				<fo:block line-height="0.1cm">&#160;</fo:block>
			</xsl:for-each>
		</xsl:if>
		<xsl:for-each select="$name/c:family">
			<xsl:choose>
				<xsl:when test="@qualifier">
					<xsl:choose>
						<xsl:when test="@qualifier = &apos;BR&apos;">
							<fo:block font-weight="bold">
								<xsl:value-of select="."/>
							</fo:block>
							<fo:block line-height="0.1cm">&#160;</fo:block>
							<xsl:variable name="count" select="count($name/c:given)"/>
							<xsl:for-each select="$name/c:given">
								<xsl:choose>
									<xsl:when test="@qualifier = &apos;BR&apos;">
										<xsl:value-of select="."/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="."/>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:if test="$count > 1">
									<xsl:if test="(position() != last()) and (position() > 1)">
										<xsl:text>, </xsl:text>
									</xsl:if>
									<xsl:if test="position() = 1">
										<xsl:text> [</xsl:text>
									</xsl:if>
									<xsl:if test="position() = last()">
										<xsl:text>]</xsl:text>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
							<fo:block line-height="0.1cm">&#160;</fo:block>
						</xsl:when>
						<xsl:when test="@qualifier = &apos;SP&apos;">
							<xsl:value-of select="."/>
							<fo:block line-height="0.1cm">&#160;</fo:block>
						</xsl:when>
						<xsl:when test="@qualifier = &apos;CL&apos;">
							<fo:block font-weight="bold">
								<xsl:value-of select="."/>
								<xsl:text>&#160;</xsl:text>
								<xsl:for-each select="$name/c:given">
									<xsl:if test="@qualifier = &apos;CL&apos;">
										<xsl:value-of select="."/>
									</xsl:if>
									<xsl:text>&#160;</xsl:text>
								</xsl:for-each>
							</fo:block>
							<fo:block line-height="0.1cm">&#160;</fo:block>
						</xsl:when>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="."/>
					<fo:block line-height="0.1cm">&#160;</fo:block>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>

	<xd:doc>
		<xd:desc> show time </xd:desc>
		<xd:param name="datetime"/>
	</xd:doc>
	<xsl:template name="show-time">
		<xsl:param name="datetime"/>
		<xsl:choose>
			<xsl:when test="not($datetime)">
				<xsl:call-template name="formatDateTime">
					<xsl:with-param name="date" select="@value"/>
				</xsl:call-template>
				<xsl:text> </xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="formatDateTime">
					<xsl:with-param name="date" select="$datetime/@value"/>
				</xsl:call-template>
				<xsl:text> </xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
		<xd:param name="data"/>
	</xd:doc>
	<xsl:template name="caseDown">
		<xsl:param name="data"/>
		<xsl:if test="$data">
			<xsl:value-of
				select="translate($data, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"
			/>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="string"/>
		<xd:param name="delimiters"/>
		<xd:param name="prefix"/>
		<xd:param name="localize"/>
	</xd:doc>
	<xsl:template name="tokenize">
		<xsl:param name="string" select="''"/>
		<xsl:param name="delimiters" select="' '"/>
		<xsl:param name="prefix"/>
		<xsl:param name="localize" select="true()"/>
		<xsl:choose>
			<xsl:when test="not($string)"/>
			<xsl:when test="not($delimiters)">
				<xsl:call-template name="_tokenize-characters">
					<xsl:with-param name="string" select="$string"/>
					<xsl:with-param name="prefix" select="$prefix"/>
					<xsl:with-param name="localize" select="$localize"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="_tokenize-delimiters">
					<xsl:with-param name="string" select="$string"/>
					<xsl:with-param name="delimiters" select="$delimiters"/>
					<xsl:with-param name="prefix" select="$prefix"/>
					<xsl:with-param name="localize" select="$localize"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="string"/>
		<xd:param name="delimiters"/>
		<xd:param name="prefix"/>
		<xd:param name="localize"/>
	</xd:doc>
	<xsl:template name="_tokenize-delimiters">
		<xsl:param name="string"/>
		<xsl:param name="delimiters"/>
		<xsl:param name="prefix"/>
		<xsl:param name="localize" select="true()"/>

		<xsl:variable name="delimiter" select="substring($delimiters, 1, 1)"/>
		<xsl:choose>
			<xsl:when test="not($delimiter)">
				<xsl:choose>
					<xsl:when test="$localize">
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="key" select="concat($prefix, $string)"/>
						</xsl:call-template>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$string"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:when test="contains($string, $delimiter)">
				<xsl:if test="not(starts-with($string, $delimiter))">
					<xsl:call-template name="_tokenize-delimiters">
						<xsl:with-param name="string" select="substring-before($string, $delimiter)"/>
						<xsl:with-param name="delimiters" select="substring($delimiters, 2)"/>
						<xsl:with-param name="prefix" select="$prefix"/>
						<xsl:with-param name="localize" select="$localize"/>
					</xsl:call-template>
				</xsl:if>
				<xsl:text> </xsl:text>
				<xsl:call-template name="_tokenize-delimiters">
					<xsl:with-param name="string" select="substring-after($string, $delimiter)"/>
					<xsl:with-param name="delimiters" select="$delimiters"/>
					<xsl:with-param name="prefix" select="$prefix"/>
					<xsl:with-param name="localize" select="$localize"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="_tokenize-delimiters">
					<xsl:with-param name="string" select="$string"/>
					<xsl:with-param name="delimiters" select="substring($delimiters, 2)"/>
					<xsl:with-param name="prefix" select="$prefix"/>
					<xsl:with-param name="localize" select="$localize"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


	<xd:doc>
		<xd:desc/>
		<xd:param name="in"/>
		<xd:param name="part"/>
	</xd:doc>
	<xsl:template name="show-timestamp">
		<xsl:param name="in"/>
		<xsl:param name="part" select="'datetime'"/>

		<xsl:call-template name="formatDateTime">
			<xsl:with-param name="date" select="$in/@value"/>
			<xsl:with-param name="part" select="$part"/>
		</xsl:call-template>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="string"/>
		<xd:param name="prefix"/>
		<xd:param name="localize"/>
	</xd:doc>
	<xsl:template name="_tokenize-characters">
		<xsl:param name="string"/>
		<xsl:param name="prefix"/>
		<xsl:param name="localize" select="true()"/>
		<xsl:if test="$string">
			<xsl:choose>
				<xsl:when test="$localize">
					<xsl:call-template name="getLocalizedString">
						<xsl:with-param name="key"
							select="concat($prefix, substring($string, 1, 1))"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="substring($string, 1, 1)"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:call-template name="_tokenize-characters">
				<xsl:with-param name="string" select="substring($string, 2)"/>
				<xsl:with-param name="prefix" select="$prefix"/>
				<xsl:with-param name="localize" select="$localize"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="in"/>
	</xd:doc>
	<xsl:template name="show-nullFlavor">
		<xsl:param name="in"/>
		<xsl:if test="string-length($in) > 0">
			<xsl:call-template name="getLocalizedString">
				<xsl:with-param name="key" select="concat('nullFlavor_', $in)"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="in"/>
	</xd:doc>
	<xsl:template name="show-ivlts">
		<xsl:param name="in"/>
		<xsl:if test="$in">
			<xsl:variable name="fromDate">
				<xsl:call-template name="show-timestamp">
					<xsl:with-param name="in" select="$in/c:low"/>
					<xsl:with-param name="part" select="'date'"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="toDate">
				<xsl:call-template name="show-timestamp">
					<xsl:with-param name="in" select="$in/c:high"/>
					<xsl:with-param name="part" select="'date'"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="fromTime">
				<xsl:call-template name="show-timestamp">
					<xsl:with-param name="in" select="$in/c:low"/>
					<xsl:with-param name="part" select="'time'"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="toTime">
				<xsl:call-template name="show-timestamp">
					<xsl:with-param name="in" select="$in/c:high"/>
					<xsl:with-param name="part" select="'time'"/>
				</xsl:call-template>
			</xsl:variable>

			<xsl:choose>
				<xsl:when test="$in/@value">
					<xsl:call-template name="getLocalizedString">
						<xsl:with-param name="key" select="'at'"/>
						<xsl:with-param name="post" select="'&#160;'"/>
					</xsl:call-template>
					<xsl:call-template name="show-timestamp">
						<xsl:with-param name="in" select="$in"/>
					</xsl:call-template>
				</xsl:when>
				<!-- Same day, different times -->
				<xsl:when test="$fromDate = $toDate">
					<xsl:call-template name="show-timestamp">
						<xsl:with-param name="in" select="$in/c:low"/>
						<xsl:with-param name="part" select="'date'"/>
					</xsl:call-template>

					<xsl:if test="string-length(normalize-space($fromTime)) > 0">
						<xsl:text> </xsl:text>
						<xsl:value-of select="normalize-space($fromTime)"/>

						<xsl:if test="string-length(normalize-space($toTime)) > 0">
							<xsl:text> - </xsl:text>
							<xsl:value-of select="normalize-space($toTime)"/>
						</xsl:if>
					</xsl:if>
				</xsl:when>
				<xsl:when test="$in/c:low">
					<xsl:call-template name="getLocalizedString">
						<xsl:with-param name="key" select="'from'"/>
						<xsl:with-param name="post" select="'&#160;'"/>
					</xsl:call-template>
					<xsl:call-template name="show-timestamp">
						<xsl:with-param name="in" select="$in/c:low"/>
					</xsl:call-template>
					<xsl:if test="$in/c:high">
						<xsl:call-template name="getLocalizedString">
							<xsl:with-param name="pre" select="' '"/>
							<xsl:with-param name="key" select="'to'"/>
							<xsl:with-param name="post" select="'&#160;'"/>
						</xsl:call-template>
						<xsl:call-template name="show-timestamp">
							<xsl:with-param name="in" select="$in/c:high"/>
						</xsl:call-template>
					</xsl:if>
				</xsl:when>
				<xsl:when test="$in/c:high">
					<xsl:call-template name="getLocalizedString">
						<xsl:with-param name="key" select="'to'"/>
						<xsl:with-param name="post" select="'&#160;'"/>
					</xsl:call-template>
					<xsl:call-template name="show-timestamp">
						<xsl:with-param name="in" select="$in/c:high"/>
					</xsl:call-template>
				</xsl:when>
			</xsl:choose>
		</xsl:if>
	</xsl:template>

	<xd:doc>
		<xd:desc/>
		<xd:param name="pre"/>
		<xd:param name="key"/>
		<xd:param name="post"/>
	</xd:doc>
	<xsl:template name="getLocalizedString">
		<xsl:param name="pre" select="''"/>
		<xsl:param name="key"/>
		<xsl:param name="post" select="''"/>


		<xsl:for-each select="$vocMessages">
			<xsl:variable name="translation" select="key('util-i18nkey', $key)"/>
			<xsl:choose>
				<!-- compare 'de-CH' -->
				<xsl:when test="$translation/value[@lang = $textLangLowerCase]">
					<xsl:value-of
						select="concat($pre, $translation/value[@lang = $textLangLowerCase]/text(), $post)"
					/>
				</xsl:when>
				<!-- compare 'de' in 'de-CH' -->
				<xsl:when test="$translation/value[substring(@lang, 1, 2) = $textLangPartLowerCase]">
					<xsl:value-of
						select="concat($pre, $translation/value[substring(@lang, 1, 2) = $textLangPartLowerCase]/text(), $post)"
					/>
				</xsl:when>
				<!-- compare 'en-US' -->
				<xsl:when test="$translation/value[@lang = $textLangDefaultLowerCase]">
					<xsl:value-of
						select="concat($pre, $translation/value[@lang = $textLangDefaultLowerCase]/text(), $post)"
					/>
				</xsl:when>
				<!-- compare 'en' in 'en-US' -->
				<xsl:when
					test="$translation/value[substring(@lang, 1, 2) = $textLangDefaultPartLowerCase]">
					<xsl:value-of
						select="concat($pre, $translation/value[substring(@lang, 1, 2) = $textLangDefaultPartLowerCase]/text(), $post)"
					/>
				</xsl:when>
				<xsl:when test="$translation/value[@lang = 'en-us']">
					<xsl:value-of select="concat($pre, $translation/value/text(), $post)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($pre, $key, $post)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>

</xsl:stylesheet>
